{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the AnsibleMetrics documentation AnsibleMetrics is a Python-based static source code analyzer for Ansible blueprints that helps to quantify the characteristics of infrastructure code to support DevOps engineers when maintaining and evolving it. It currently supports 46 source code metrics, though other metrics can be derived by combining the implemented ones. It represents a step forward towards closing the gap for the implementation of software quality in-struments to support DevOps engineers when developing and maintaining infrastructure code and the development of measurement models for its quality! How to install Installation is made simple by the PyPI repository. Download the tool and install it with pip install ansiblemetrics . Alternatively, install it from the source code project directory with the following commands: pip install -r requirements.txt pip install . AnsibleMetrics is now installed and can be used from both command-line and Python code. How to use Command-line Run ansible-metrics --help for instructions about the usage: usage: ansible-metrics [-h] [--omit-zero-metrics] [-d DEST] [-o] [-v] src Extract metrics from Ansible scripts. positional arguments: src source file (playbook or tasks file) or directory optional arguments: -h, --help show this help message and exit --omit-zero-metrics omit metrics with value equal 0 -d DEST, --dest DEST destination path to save results -o, --output shows output -v, --version show program's version number and exit Assume that the following example is named playbook1.yml : --- - hosts: webservers vars: http_port: 80 remote_user: root tasks: - name: ensure apache is at the latest version yum: name: httpd state: latest - hosts: databases remote_user: root tasks: - name: ensure postgresql is at the latest version yum: name: postgresql state: latest - name: ensure that postgresql is started service: name: postgresql state: started and is located within the folder playbooks as follows: playbooks |- playbook1.yml |- playbook3.yml |- playbook3.yml Also, assume the user's working directory is the playbooks folder. Then, it is possible to extract source code characteristics from that blueprint by running the following command: ansible-metrics --omit-zero-metrics playbook1.yml --dest report.json For this example, the \\textit{report.json} will result in { \"filepath\": \"playbook1.yml\", \"avg_play_size\": 10, \"avg_task_size\": 4, \"lines_blank\": 4, \"lines_code\": 20, \"num_keys\": 20, \"num_parameters\": 6, \"num_plays\": 2, \"num_tasks\": 3, \"num_tokens\": 50, \"num_unique_names\": 3, \"num_vars\": 1, \"text_entropy\": 4.37 } Python AnsibleMetrics currently supports up to 46 source code metrics, implemented in Python. To extract the value for a given metric follow this pattern: from io import StringIO from ansiblemetrics.<general|playbook>.<metric> import <Metric> script = 'a valid yaml script' value = <Metric>(StringIO(script).count() where has to be replaced with the name of the desired metric module to compute the value of a specific metric. The difference between the general and the playbook modules lies in the fact that the playbook module contains metrics specific to playbooks (for example, the number of plays and tasks), while the general module contains metrics that can be generalized to other languages (for example, the lines of code). For example, to count the number of lines of code: from io import StringIO from ansiblemetrics.general.loc import LOC script = \"\"\" --- - hosts: all tasks: - name: This is a task! debug: msg: \"Hello World\" \"\"\" metric = LOC(StringIO(script)) print('Lines of executable code:', metric.count()) # This will result in # > Lines of executable code: 5 To extract the value for the 46 metrics at once, import the ansiblemetrics.metrics_extractor package and call the method extract_all() (in this case the return value will be a json object): from io import StringIO from ansiblemetrics.metrics_extractor import extract_all script = \"\"\" --- - hosts: all tasks: - name: This is a task! debug: msg: \"Hello World\" \"\"\" metrics = extract_all(StringIO(script)) print('Lines of executable code:', metrics['lines_code']) # This will result in # > Lines of executable code: 5 Below the list of the implemented metrics and their documentation. General Lines blank Lines of code Lines of comment Number of conditions Number of decisions Number of deprecated keywords Number of keys Number of math operations Number of suspicious comments Number of tokens Text entropy Playbook Average play size Average task size Number of blocks Number of block error handling Number of commands Number of deprecated modules Number of distinct modules Number of external modules Number of fact modules Number of fact modules Number of file extists Number of file mode Number of file modules Number of filters Number of ignore_error Number of import_playbook Number of import_role Number of import_tasks Number of include Number of include_role Number of include_tasks Number of include_vars Number of lookups Number of loops Number of name with variables Number of parameters Number of paths Number of plays Number of prompts Number of regex Number of roles Number of SSH Number of tasks Number of unique names Number of urls Number of variables","title":"Quick Start"},{"location":"#welcome-to-the-ansiblemetrics-documentation","text":"AnsibleMetrics is a Python-based static source code analyzer for Ansible blueprints that helps to quantify the characteristics of infrastructure code to support DevOps engineers when maintaining and evolving it. It currently supports 46 source code metrics, though other metrics can be derived by combining the implemented ones. It represents a step forward towards closing the gap for the implementation of software quality in-struments to support DevOps engineers when developing and maintaining infrastructure code and the development of measurement models for its quality!","title":"Welcome to the AnsibleMetrics documentation"},{"location":"#how-to-install","text":"Installation is made simple by the PyPI repository. Download the tool and install it with pip install ansiblemetrics . Alternatively, install it from the source code project directory with the following commands: pip install -r requirements.txt pip install . AnsibleMetrics is now installed and can be used from both command-line and Python code.","title":"How to install"},{"location":"#how-to-use","text":"","title":"How to use"},{"location":"#command-line","text":"Run ansible-metrics --help for instructions about the usage: usage: ansible-metrics [-h] [--omit-zero-metrics] [-d DEST] [-o] [-v] src Extract metrics from Ansible scripts. positional arguments: src source file (playbook or tasks file) or directory optional arguments: -h, --help show this help message and exit --omit-zero-metrics omit metrics with value equal 0 -d DEST, --dest DEST destination path to save results -o, --output shows output -v, --version show program's version number and exit Assume that the following example is named playbook1.yml : --- - hosts: webservers vars: http_port: 80 remote_user: root tasks: - name: ensure apache is at the latest version yum: name: httpd state: latest - hosts: databases remote_user: root tasks: - name: ensure postgresql is at the latest version yum: name: postgresql state: latest - name: ensure that postgresql is started service: name: postgresql state: started and is located within the folder playbooks as follows: playbooks |- playbook1.yml |- playbook3.yml |- playbook3.yml Also, assume the user's working directory is the playbooks folder. Then, it is possible to extract source code characteristics from that blueprint by running the following command: ansible-metrics --omit-zero-metrics playbook1.yml --dest report.json For this example, the \\textit{report.json} will result in { \"filepath\": \"playbook1.yml\", \"avg_play_size\": 10, \"avg_task_size\": 4, \"lines_blank\": 4, \"lines_code\": 20, \"num_keys\": 20, \"num_parameters\": 6, \"num_plays\": 2, \"num_tasks\": 3, \"num_tokens\": 50, \"num_unique_names\": 3, \"num_vars\": 1, \"text_entropy\": 4.37 }","title":"Command-line"},{"location":"#python","text":"AnsibleMetrics currently supports up to 46 source code metrics, implemented in Python. To extract the value for a given metric follow this pattern: from io import StringIO from ansiblemetrics.<general|playbook>.<metric> import <Metric> script = 'a valid yaml script' value = <Metric>(StringIO(script).count() where has to be replaced with the name of the desired metric module to compute the value of a specific metric. The difference between the general and the playbook modules lies in the fact that the playbook module contains metrics specific to playbooks (for example, the number of plays and tasks), while the general module contains metrics that can be generalized to other languages (for example, the lines of code). For example, to count the number of lines of code: from io import StringIO from ansiblemetrics.general.loc import LOC script = \"\"\" --- - hosts: all tasks: - name: This is a task! debug: msg: \"Hello World\" \"\"\" metric = LOC(StringIO(script)) print('Lines of executable code:', metric.count()) # This will result in # > Lines of executable code: 5 To extract the value for the 46 metrics at once, import the ansiblemetrics.metrics_extractor package and call the method extract_all() (in this case the return value will be a json object): from io import StringIO from ansiblemetrics.metrics_extractor import extract_all script = \"\"\" --- - hosts: all tasks: - name: This is a task! debug: msg: \"Hello World\" \"\"\" metrics = extract_all(StringIO(script)) print('Lines of executable code:', metrics['lines_code']) # This will result in # > Lines of executable code: 5 Below the list of the implemented metrics and their documentation.","title":"Python"},{"location":"#general","text":"Lines blank Lines of code Lines of comment Number of conditions Number of decisions Number of deprecated keywords Number of keys Number of math operations Number of suspicious comments Number of tokens Text entropy","title":"General"},{"location":"#playbook","text":"Average play size Average task size Number of blocks Number of block error handling Number of commands Number of deprecated modules Number of distinct modules Number of external modules Number of fact modules Number of fact modules Number of file extists Number of file mode Number of file modules Number of filters Number of ignore_error Number of import_playbook Number of import_role Number of import_tasks Number of include Number of include_role Number of include_tasks Number of include_vars Number of lookups Number of loops Number of name with variables Number of parameters Number of paths Number of plays Number of prompts Number of regex Number of roles Number of SSH Number of tasks Number of unique names Number of urls Number of variables","title":"Playbook"},{"location":"about/","text":"RADON-H2020 The RADON project aims to unlock the benefits that the European software industry can derive from serverless FaaS (function-as-a-service). The project team-members aim to create an upgraded framework for defining, developing and operating applications (DevOps) based on FaaS computing serverless technology. Find out more on https://radon-h2020.eu/","title":"About"},{"location":"about/#radon-h2020","text":"The RADON project aims to unlock the benefits that the European software industry can derive from serverless FaaS (function-as-a-service). The project team-members aim to create an upgraded framework for defining, developing and operating applications (DevOps) based on FaaS computing serverless technology. Find out more on https://radon-h2020.eu/","title":"RADON-H2020"},{"location":"general/LinesBlank/","text":"Lines blank It measures the number of blank lines of code. Example The following example has 2 blank lines of code . --- - hosts: localhost tasks: - name: task 1 include_vars: file: username_info.yml - name: task 2 include_vars: file: username_info.yml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blank lines Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_blank import LinesBlank str = '- hosts: localhost\\n\\n\\ttasks:\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesBlank(script).count() print('Lines blank: ', count) >>> Lines blank: 2","title":"Lines blank"},{"location":"general/LinesBlank/#lines-blank","text":"It measures the number of blank lines of code.","title":"Lines blank"},{"location":"general/LinesBlank/#example","text":"The following example has 2 blank lines of code . --- - hosts: localhost tasks: - name: task 1 include_vars: file: username_info.yml - name: task 2 include_vars: file: username_info.yml","title":"Example"},{"location":"general/LinesBlank/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blank lines Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/LinesBlank/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_blank import LinesBlank str = '- hosts: localhost\\n\\n\\ttasks:\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesBlank(script).count() print('Lines blank: ', count) >>> Lines blank: 2","title":"How to use"},{"location":"general/LinesCode/","text":"Lines of code It measures the number of executable lines of code. Example The following example has 8 executable lines of code . Blank and commented lines are not considered executable lines of code. --- - hosts: localhost tasks: - name: task 1 include_vars: file: username_info.yml - name: task 2 include_vars: file: username_info.yml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of executable lines of code Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_code import LinesCode str = '---\\n- hosts: localhost\\n\\n\\ttasks:\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesCode(script).count() print('Lines of code: ', count) >>> Lines of code: 8","title":"Lines of code"},{"location":"general/LinesCode/#lines-of-code","text":"It measures the number of executable lines of code.","title":"Lines of code"},{"location":"general/LinesCode/#example","text":"The following example has 8 executable lines of code . Blank and commented lines are not considered executable lines of code. --- - hosts: localhost tasks: - name: task 1 include_vars: file: username_info.yml - name: task 2 include_vars: file: username_info.yml","title":"Example"},{"location":"general/LinesCode/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of executable lines of code Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/LinesCode/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_code import LinesCode str = '---\\n- hosts: localhost\\n\\n\\ttasks:\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesCode(script).count() print('Lines of code: ', count) >>> Lines of code: 8","title":"How to use"},{"location":"general/LinesComment/","text":"Lines of comment It measures the number of commented lines of code. Example The following example has 2 commented lines of code . --- - hosts: localhost tasks: # Defining the first task - name: task 1 include_vars: file: username_info.yml # Defining the second task - name: task 2 include_vars: file: username_info.yml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of commented lines Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_comment import LinesComment str = '---\\n- hosts: localhost\\n\\n\\ttasks:\\n\\t# Defining the first task\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t# Defining the second task\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesComment(script).count() print('Lines of comment: ', count) >>> Lines of comment: 2","title":"Lines of comment"},{"location":"general/LinesComment/#lines-of-comment","text":"It measures the number of commented lines of code.","title":"Lines of comment"},{"location":"general/LinesComment/#example","text":"The following example has 2 commented lines of code . --- - hosts: localhost tasks: # Defining the first task - name: task 1 include_vars: file: username_info.yml # Defining the second task - name: task 2 include_vars: file: username_info.yml","title":"Example"},{"location":"general/LinesComment/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of commented lines Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/LinesComment/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.lines_comment import LinesComment str = '---\\n- hosts: localhost\\n\\n\\ttasks:\\n\\t# Defining the first task\\n\\t- name: task 1\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml\\n\\n\\t# Defining the second task\\n\\t- name: task 2\\n\\t\\tinclude_vars:\\n\\t\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = LinesComment(script).count() print('Lines of comment: ', count) >>> Lines of comment: 2","title":"How to use"},{"location":"general/NumConditions/","text":"Number of conditions It measures the number of conditions in an Ansible script. A condition is a Boolean expression containing no Boolean operators. Conditions are identified by the following comparison operators: is, in, ==, !=, >, >=, <, <= Example The following script extracted from mydailytutorials has five conditions - hosts: all test1: \"Hello World\" tasks: - debug: msg: \"Equals\" when: - test1 == \"Hello World\" # 1st condition - test1 != \"Hello\" # 2nd condition - debug: msg: \"Not Equals\" when: test1 != \"Hello World\" # 3rd condition - debug: msg: \"Not Equals\" when: test1 <= 5 or test1 >= 10 # 4th condition Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of conditions Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_conditions import NumConditions str = '- hosts: all\\n\\ttest1: \"Hello World\"\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"Equals\"\\n\\t\\t\\twhen:\\n\\t\\t\\t\\t- test1 == \"Hello World\"\\t\\t\\t\\t\\t# 1st condition\\n\\t\\t\\t\\t- test1 != \"Hello\"\\t\\t\\t\\t\\t\\t\\t\\t# 2nd condition\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: test1 != \"Hello World\"\\t\\t\\t\\t# 3rd condition\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: test1 <= 5 or test1 >= 10\\t\\t # 4th condition' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumConditions(script).count() print('Number of conditions: ', count) >>> Number of conditions: 5","title":"Number of conditions"},{"location":"general/NumConditions/#number-of-conditions","text":"It measures the number of conditions in an Ansible script. A condition is a Boolean expression containing no Boolean operators. Conditions are identified by the following comparison operators: is, in, ==, !=, >, >=, <, <=","title":"Number of conditions"},{"location":"general/NumConditions/#example","text":"The following script extracted from mydailytutorials has five conditions - hosts: all test1: \"Hello World\" tasks: - debug: msg: \"Equals\" when: - test1 == \"Hello World\" # 1st condition - test1 != \"Hello\" # 2nd condition - debug: msg: \"Not Equals\" when: test1 != \"Hello World\" # 3rd condition - debug: msg: \"Not Equals\" when: test1 <= 5 or test1 >= 10 # 4th condition","title":"Example"},{"location":"general/NumConditions/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of conditions Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumConditions/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_conditions import NumConditions str = '- hosts: all\\n\\ttest1: \"Hello World\"\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"Equals\"\\n\\t\\t\\twhen:\\n\\t\\t\\t\\t- test1 == \"Hello World\"\\t\\t\\t\\t\\t# 1st condition\\n\\t\\t\\t\\t- test1 != \"Hello\"\\t\\t\\t\\t\\t\\t\\t\\t# 2nd condition\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: test1 != \"Hello World\"\\t\\t\\t\\t# 3rd condition\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: test1 <= 5 or test1 >= 10\\t\\t # 4th condition' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumConditions(script).count() print('Number of conditions: ', count) >>> Number of conditions: 5","title":"How to use"},{"location":"general/NumDecisions/","text":"Number of decisions It measures the number of decision in an Ansible script. A decision is a Boolean expression composed of conditions and one or more Boolean operators. Conditions are identified by the following logical operators: and, or, not . Note: A decision without a Boolean operator is a condition. Example The following script extracted has four decisions - hosts: all tasks: - debug: msg: \"Equals\" when: test1 == \"Hello World\" or test1 == \"Hello\" # 1st decision - debug: msg: \"Not Equals\" when: - test1 == \"Hello World\" and not test2 == test1 # 2nd (and) and 3rd (not) decision - test3 == \"Waldo\" # 4th decision (multiple conditions that all need to be true (a logical \u2018and\u2019) can be specified as a list) Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of decisions Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_decisions import NumDecisions str = '- hosts: all\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"Equals\"\\n\\t\\t\\twhen: test1 == \"Hello World\" or test1 == \"Hello\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: \\n\\t\\t\\t\\t- test1 == \"Hello World\" and not test2 == test1\\n\\t\\t\\t\\t- test3 == \"Waldo\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDecisions(script).count() print('Number of decisions: ', count) >>> Number of decisions: 4","title":"Number of decisions"},{"location":"general/NumDecisions/#number-of-decisions","text":"It measures the number of decision in an Ansible script. A decision is a Boolean expression composed of conditions and one or more Boolean operators. Conditions are identified by the following logical operators: and, or, not . Note: A decision without a Boolean operator is a condition.","title":"Number of decisions"},{"location":"general/NumDecisions/#example","text":"The following script extracted has four decisions - hosts: all tasks: - debug: msg: \"Equals\" when: test1 == \"Hello World\" or test1 == \"Hello\" # 1st decision - debug: msg: \"Not Equals\" when: - test1 == \"Hello World\" and not test2 == test1 # 2nd (and) and 3rd (not) decision - test3 == \"Waldo\" # 4th decision (multiple conditions that all need to be true (a logical \u2018and\u2019) can be specified as a list)","title":"Example"},{"location":"general/NumDecisions/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of decisions Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumDecisions/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_decisions import NumDecisions str = '- hosts: all\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"Equals\"\\n\\t\\t\\twhen: test1 == \"Hello World\" or test1 == \"Hello\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"Not Equals\"\\n\\t\\t\\twhen: \\n\\t\\t\\t\\t- test1 == \"Hello World\" and not test2 == test1\\n\\t\\t\\t\\t- test3 == \"Waldo\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDecisions(script).count() print('Number of decisions: ', count) >>> Number of decisions: 4","title":"How to use"},{"location":"general/NumDeprecatedKeywords/","text":"Number of deprecated keywords It measures the number of deprecated keywords in an Ansible script. Example The following example has one depecrated keyword that occurs twice, namely args : --- - hosts: localhost tasks: - name: Hello, Ansible! action: rust_helloworld args: # 1st deprecated keyword name: Ansible register: hello_ansible - name: Async Hello, Ansible! action: rust_helloworld args: # 2nd deprecated keyword name: Ansible async: 10 poll: 1 register: async_hello_ansible Parameters Type Description Input io.StringIO An ansible playbook Output unsinged int The number of deprecated keywords Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_deprecated_keywords import NumDeprecatedKeywords str = '---\\n- hosts: localhost\\n\\ttasks:\\n\\t\\n\\t- name: Hello, Ansible!\\n\\t\\taction: rust_helloworld\\n\\t\\targs:\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t # 1st deprecated keyword\\n\\t\\t\\tname: Ansible\\n\\t\\tregister: hello_ansible\\n\\t\\n\\t- name: Async Hello, Ansible!\\n\\t\\taction: rust_helloworld\\n\\t\\targs:\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t # 2nd deprecated keyword\\n\\t\\t\\tname: Ansible\\n\\t\\tasync: 10\\n\\t\\tpoll: 1\\n\\t\\tregister: async_hello_ansible\\n' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDeprecatedKeywords(script).count() print('Number of deprecated keywords: ', count) >>> Number of deprecated keywords: 2","title":"Number of deprecated keywords"},{"location":"general/NumDeprecatedKeywords/#number-of-deprecated-keywords","text":"It measures the number of deprecated keywords in an Ansible script.","title":"Number of deprecated keywords"},{"location":"general/NumDeprecatedKeywords/#example","text":"The following example has one depecrated keyword that occurs twice, namely args : --- - hosts: localhost tasks: - name: Hello, Ansible! action: rust_helloworld args: # 1st deprecated keyword name: Ansible register: hello_ansible - name: Async Hello, Ansible! action: rust_helloworld args: # 2nd deprecated keyword name: Ansible async: 10 poll: 1 register: async_hello_ansible","title":"Example"},{"location":"general/NumDeprecatedKeywords/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsinged int The number of deprecated keywords Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumDeprecatedKeywords/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_deprecated_keywords import NumDeprecatedKeywords str = '---\\n- hosts: localhost\\n\\ttasks:\\n\\t\\n\\t- name: Hello, Ansible!\\n\\t\\taction: rust_helloworld\\n\\t\\targs:\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t # 1st deprecated keyword\\n\\t\\t\\tname: Ansible\\n\\t\\tregister: hello_ansible\\n\\t\\n\\t- name: Async Hello, Ansible!\\n\\t\\taction: rust_helloworld\\n\\t\\targs:\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t # 2nd deprecated keyword\\n\\t\\t\\tname: Ansible\\n\\t\\tasync: 10\\n\\t\\tpoll: 1\\n\\t\\tregister: async_hello_ansible\\n' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDeprecatedKeywords(script).count() print('Number of deprecated keywords: ', count) >>> Number of deprecated keywords: 2","title":"How to use"},{"location":"general/NumKeys/","text":"Number of keys It measures the number of keys in the dictionary representing an Ansible script. Example The following example has nine keys, namely 'hosts', 'roles', 'hosts', 'roles', 'tasks', 'name', 'mysql_db', 'name', 'state'. - hosts: all roles: - common # Configure and deploy database servers. - hosts: dbservers roles: - db tasks: - name: Create Application Database mysql_db: name: \"{{ dbname }}\" state: present Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of keys in the dictionary Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_keys import NumKeys str = '- hosts: all\\n\\troles:\\n\\t- common\\n\\n# Configure and deploy database servers.\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\ntasks: \\n\\t- name: Create Application Database\\n\\t\\tmysql_db:\\n\\t\\t\\tname: \"{{ dbname }}\"\\n\\t\\t\\tstate: present' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumKeys(script).count() print('Number of keys: ', count) >>> Number of keys: 9","title":"Number of keys"},{"location":"general/NumKeys/#number-of-keys","text":"It measures the number of keys in the dictionary representing an Ansible script.","title":"Number of keys"},{"location":"general/NumKeys/#example","text":"The following example has nine keys, namely 'hosts', 'roles', 'hosts', 'roles', 'tasks', 'name', 'mysql_db', 'name', 'state'. - hosts: all roles: - common # Configure and deploy database servers. - hosts: dbservers roles: - db tasks: - name: Create Application Database mysql_db: name: \"{{ dbname }}\" state: present","title":"Example"},{"location":"general/NumKeys/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of keys in the dictionary Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumKeys/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_keys import NumKeys str = '- hosts: all\\n\\troles:\\n\\t- common\\n\\n# Configure and deploy database servers.\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\ntasks: \\n\\t- name: Create Application Database\\n\\t\\tmysql_db:\\n\\t\\t\\tname: \"{{ dbname }}\"\\n\\t\\t\\tstate: present' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumKeys(script).count() print('Number of keys: ', count) >>> Number of keys: 9","title":"How to use"},{"location":"general/NumMathOperations/","text":"Number of math operations It measures the number of math opeartions in an Ansible script. The following operators are considered for the calculation: +, -, /, //, %, \\*, \\*\\* Example The following script extracted from mydailytutorials has five math operands - hosts: localhost tasks: - debug: msg: \"addition{{ 4 + 3 }}\" # 1st operation - debug: msg: \"substraction {{ 4 - 3 }}\" # 2nd operation - debug: msg: \"multiplication {{ 4 * 3 }}\" # 3rd operation - debug: msg: \"Modulo operation {{ 7 % 4}}\" # 4th operation - debug: msg: \"floating division {{ 4 / 3}}\" # 5th operation Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of arithmetic operations Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_math_operations import NumMathOperations str = '- hosts: localhost\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"addition{{ 4 + 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"substraction {{ 4 - 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"multiplication {{ 4 * 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"Modulo operation {{ 7 % 4}}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"floating division {{ 4 / 3}}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumMathOperations(script).count() print('Number of math operations: ', count) >>> Number of math operations: 5","title":"Number of math operations"},{"location":"general/NumMathOperations/#number-of-math-operations","text":"It measures the number of math opeartions in an Ansible script. The following operators are considered for the calculation: +, -, /, //, %, \\*, \\*\\*","title":"Number of math operations"},{"location":"general/NumMathOperations/#example","text":"The following script extracted from mydailytutorials has five math operands - hosts: localhost tasks: - debug: msg: \"addition{{ 4 + 3 }}\" # 1st operation - debug: msg: \"substraction {{ 4 - 3 }}\" # 2nd operation - debug: msg: \"multiplication {{ 4 * 3 }}\" # 3rd operation - debug: msg: \"Modulo operation {{ 7 % 4}}\" # 4th operation - debug: msg: \"floating division {{ 4 / 3}}\" # 5th operation","title":"Example"},{"location":"general/NumMathOperations/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of arithmetic operations Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumMathOperations/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_math_operations import NumMathOperations str = '- hosts: localhost\\n\\ttasks:\\n\\t- debug:\\n\\t\\t\\tmsg: \"addition{{ 4 + 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"substraction {{ 4 - 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"multiplication {{ 4 * 3 }}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"Modulo operation {{ 7 % 4}}\"\\n\\t- debug:\\n\\t\\t\\tmsg: \"floating division {{ 4 / 3}}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumMathOperations(script).count() print('Number of math operations: ', count) >>> Number of math operations: 5","title":"How to use"},{"location":"general/NumSuspiciousComments/","text":"Number of suspicious comments It measures the number of suspicious comments, i.e., those containing at least one of the following keywords: TODO , FIXME , HACK , XXX , CHECKME , DOCME , TESTME , PENDING . Example The following example has two suspicious comments. --- # TODO: Remove this task after Ansible 2.x npm module bug is fixed. See: # https://github.com/ansible/ansible-modules-extras/issues/1375 - name: Ensure forever is installed (to run Node.js apps). npm: name=forever global=yes state=present become: yes become_user: \"{{ nodejs_install_npm_user }}\" when: nodejs_forever # TODO: Remove this task after Ansible 2.x npm module bug is fixed. See: # https://github.com/ansible/ansible-modules-extras/issues/1375 - name: Ensure forever is at the latest release. npm: name=forever global=yes state=latest become: yes become_user: \"{{ nodejs_install_npm_user }}\" when: nodejs_forever Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of suspicious comments Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_suspicious_comments import NumSuspiciousComments str = '---\\n# TODO: Remove this task after Ansible 2.x npm module bug is fixed. See:\\n# https://github.com/ansible/ansible-modules-extras/issues/1375\\n- name: Ensure forever is installed (to run Node.js apps).\\n\\tnpm: name=forever global=yes state=present\\n\\tbecome: yes\\n\\tbecome_user: \"{{ nodejs_install_npm_user }}\"\\n\\twhen: nodejs_forever\\n# TODO: Remove this task after Ansible 2.x npm module bug is fixed. See:\\n# https://github.com/ansible/ansible-modules-extras/issues/1375\\n- name: Ensure forever is at the latest release.\\n\\tnpm: name=forever global=yes state=latest\\n\\tbecome: yes\\n\\tbecome_user: \"{{ nodejs_install_npm_user }}\"\\n\\twhen: nodejs_forever\\t' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumSuspiciousComments(script).count() print('Number of suspicious comments: ', count) >>> Number of suspicious comments: 2","title":"Number of suspicious comments"},{"location":"general/NumSuspiciousComments/#number-of-suspicious-comments","text":"It measures the number of suspicious comments, i.e., those containing at least one of the following keywords: TODO , FIXME , HACK , XXX , CHECKME , DOCME , TESTME , PENDING .","title":"Number of suspicious comments"},{"location":"general/NumSuspiciousComments/#example","text":"The following example has two suspicious comments. --- # TODO: Remove this task after Ansible 2.x npm module bug is fixed. See: # https://github.com/ansible/ansible-modules-extras/issues/1375 - name: Ensure forever is installed (to run Node.js apps). npm: name=forever global=yes state=present become: yes become_user: \"{{ nodejs_install_npm_user }}\" when: nodejs_forever # TODO: Remove this task after Ansible 2.x npm module bug is fixed. See: # https://github.com/ansible/ansible-modules-extras/issues/1375 - name: Ensure forever is at the latest release. npm: name=forever global=yes state=latest become: yes become_user: \"{{ nodejs_install_npm_user }}\" when: nodejs_forever","title":"Example"},{"location":"general/NumSuspiciousComments/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of suspicious comments Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumSuspiciousComments/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_suspicious_comments import NumSuspiciousComments str = '---\\n# TODO: Remove this task after Ansible 2.x npm module bug is fixed. See:\\n# https://github.com/ansible/ansible-modules-extras/issues/1375\\n- name: Ensure forever is installed (to run Node.js apps).\\n\\tnpm: name=forever global=yes state=present\\n\\tbecome: yes\\n\\tbecome_user: \"{{ nodejs_install_npm_user }}\"\\n\\twhen: nodejs_forever\\n# TODO: Remove this task after Ansible 2.x npm module bug is fixed. See:\\n# https://github.com/ansible/ansible-modules-extras/issues/1375\\n- name: Ensure forever is at the latest release.\\n\\tnpm: name=forever global=yes state=latest\\n\\tbecome: yes\\n\\tbecome_user: \"{{ nodejs_install_npm_user }}\"\\n\\twhen: nodejs_forever\\t' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumSuspiciousComments(script).count() print('Number of suspicious comments: ', count) >>> Number of suspicious comments: 2","title":"How to use"},{"location":"general/NumTokens/","text":"Number of tokens It measures the number of tokens in an Ansible script (separated by blank spaces). Example The following script has nine tokens: - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: file: username_info.yml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of tokens Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_tokens import NumTokens str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumTokens(script).count() print('Number of tokens: ', count) >>> Number of tokens: 9","title":"Number of tokens"},{"location":"general/NumTokens/#number-of-tokens","text":"It measures the number of tokens in an Ansible script (separated by blank spaces).","title":"Number of tokens"},{"location":"general/NumTokens/#example","text":"The following script has nine tokens: - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: file: username_info.yml","title":"Example"},{"location":"general/NumTokens/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of tokens Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/NumTokens/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.num_tokens import NumTokens str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumTokens(script).count() print('Number of tokens: ', count) >>> Number of tokens: 9","title":"How to use"},{"location":"general/TextEntropy/","text":"Text entropy It measures the entropy of the script as text. Example The following example has entropy 4.89 . --- - hosts: all roles: - common - hosts: dbservers roles: - db - web Parameters Type Description Input io.StringIO An ansible playbook Output unsigned float The entropy of the script's text Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.text_entropy import TextEntropy str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\t- web' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = TextEntropy(script).count() print('Entropy: ', count) >>> Entropy: 4.89","title":"Text entropy"},{"location":"general/TextEntropy/#text-entropy","text":"It measures the entropy of the script as text.","title":"Text entropy"},{"location":"general/TextEntropy/#example","text":"The following example has entropy 4.89 . --- - hosts: all roles: - common - hosts: dbservers roles: - db - web","title":"Example"},{"location":"general/TextEntropy/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned float The entropy of the script's text Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"general/TextEntropy/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.general.text_entropy import TextEntropy str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\t- web' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = TextEntropy(script).count() print('Entropy: ', count) >>> Entropy: 4.89","title":"How to use"},{"location":"playbook/AvgPlaySize/","text":"Average play size It measures the average size of a play in an Ansible playbook. The average size is the number of executable lines of code divided by the number of plays Note: the average size is rounded off to the nearest unit. Example The following example has 5 plays for a total of 17 executable lines of code. The average play size is: round(17/5) = round(3.4) = 3 . --- - hosts: all roles: - common - hosts: dbservers roles: - db - hosts: webservers roles: - base-apache - web - hosts: lbservers roles: - haproxy - hosts: monitoring roles: - base-apache - nagios Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The average play size rounded off to the nearest unit Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.avg_play_size import AvgPlaySize str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = AvgPlaySize(script).count() print('Average play size: ', count) >>> Average play size: 3","title":"Average play size"},{"location":"playbook/AvgPlaySize/#average-play-size","text":"It measures the average size of a play in an Ansible playbook. The average size is the number of executable lines of code divided by the number of plays Note: the average size is rounded off to the nearest unit.","title":"Average play size"},{"location":"playbook/AvgPlaySize/#example","text":"The following example has 5 plays for a total of 17 executable lines of code. The average play size is: round(17/5) = round(3.4) = 3 . --- - hosts: all roles: - common - hosts: dbservers roles: - db - hosts: webservers roles: - base-apache - web - hosts: lbservers roles: - haproxy - hosts: monitoring roles: - base-apache - nagios","title":"Example"},{"location":"playbook/AvgPlaySize/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The average play size rounded off to the nearest unit Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/AvgPlaySize/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.avg_play_size import AvgPlaySize str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = AvgPlaySize(script).count() print('Average play size: ', count) >>> Average play size: 3","title":"How to use"},{"location":"playbook/AvgTaskSize/","text":"Average task size It measures the average size of a task in an Ansible playbook. The average size is the number of executable lines of code of tasks divided by the number of tasks Note: the average size is rounded off to the nearest unit. Example The following example has 3 tasks, containing 3, 6, and 3 lines of code respectively. The average task size is measured as: round((3+6+3)/3) = 4 . --- - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML # 1st task include_vars: file: username_info.yml - name: GRAB HUE LIGHT INFORMATION # 2nd task uri: url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW #3rd task debug: var: light_info.json.lights -- Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The average play size rounded off to the nearest unit Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.avg_task_size import AvgTaskSize str = '---\\n- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: '{{body_info|to_json}}'\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = AvgTaskSize(script).count() print('Average task size: ', count) >>> Average task size: 4","title":"Average task size"},{"location":"playbook/AvgTaskSize/#average-task-size","text":"It measures the average size of a task in an Ansible playbook. The average size is the number of executable lines of code of tasks divided by the number of tasks Note: the average size is rounded off to the nearest unit.","title":"Average task size"},{"location":"playbook/AvgTaskSize/#example","text":"The following example has 3 tasks, containing 3, 6, and 3 lines of code respectively. The average task size is measured as: round((3+6+3)/3) = 4 . --- - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML # 1st task include_vars: file: username_info.yml - name: GRAB HUE LIGHT INFORMATION # 2nd task uri: url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW #3rd task debug: var: light_info.json.lights --","title":"Example"},{"location":"playbook/AvgTaskSize/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The average play size rounded off to the nearest unit Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/AvgTaskSize/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.avg_task_size import AvgTaskSize str = '---\\n- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: '{{body_info|to_json}}'\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = AvgTaskSize(script).count() print('Average task size: ', count) >>> Average task size: 4","title":"How to use"},{"location":"playbook/NumAuthorizedKey/","text":"Number of authorized_key This property counts the number of authorized_key syntax occurrences, used to adds or removes SSH authorized keys for particular user accounts. Example The following example has one authorized_key occurrence. - name: Set authorized key taken from file authorized_key: user: charlie state: present key: \"{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}\" Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of authorized_key syntax Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_authorized_key import NumAuthorizedKey str = '- name: Set authorized key taken from file\\n\\tauthorized_key:\\n\\t\\tuser: charlie\\n\\t\\tstate: present\\n\\t\\tkey: \"{{ lookup(\\'file\\', \\'/home/charlie/.ssh/id_rsa.pub\\') }}\"' script = NumAuthorizedKey(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileMode(script).count() print('Number of authorized_key occurrences: ', count) >>> Number of authorized_key occurrences: 1","title":"Number of SSH"},{"location":"playbook/NumAuthorizedKey/#number-of-authorized_key","text":"","title":"Number of authorized_key"},{"location":"playbook/NumAuthorizedKey/#this-property-counts-the-number-of-authorized_key-syntax-occurrences-used-to-adds-or-removes-ssh-authorized-keys-for-particular-user-accounts","text":"","title":"This property counts the number of authorized_key  syntax occurrences, used to adds or removes SSH authorized keys for particular user accounts."},{"location":"playbook/NumAuthorizedKey/#example","text":"The following example has one authorized_key occurrence. - name: Set authorized key taken from file authorized_key: user: charlie state: present key: \"{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}\"","title":"Example"},{"location":"playbook/NumAuthorizedKey/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of authorized_key syntax Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumAuthorizedKey/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_authorized_key import NumAuthorizedKey str = '- name: Set authorized key taken from file\\n\\tauthorized_key:\\n\\t\\tuser: charlie\\n\\t\\tstate: present\\n\\t\\tkey: \"{{ lookup(\\'file\\', \\'/home/charlie/.ssh/id_rsa.pub\\') }}\"' script = NumAuthorizedKey(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileMode(script).count() print('Number of authorized_key occurrences: ', count) >>> Number of authorized_key occurrences: 1","title":"How to use"},{"location":"playbook/NumBlocks/","text":"Number of block 's It returns the number of block in the script. Blocks allow for logical grouping of tasks and in play error handling. Most of what you can apply to a single task (with the exception of loops) can be applied at the block level, which also makes it much easier to set data or directives common to the tasks. This does not mean the directive affects the block itself, but is inherited by the tasks enclosed by a block, i.e. a when will be applied to the tasks, not the block itself. Example The following example from the Ansible's documentation repository has only one block: - name: Install, configure, and start Apache block: - name: install httpd and memcached yum: name: \"{{ item }}\" state: present loop: - httpd - memcached - name: start service bar and enable it service: name: bar state: started enabled: True when: ansible_facts[\"distribution\"] == \"CentOS\" Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blocks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_blocks import NumBlocks str = '- name: Install, configure, and start Apache\\n\\tblock:\\t\\t\\t\\t \\n\\t- name: install httpd and memcached\\n\\t\\tyum:\\n\\t\\t\\tname: \"{{ item }}\"\\n\\t\\t\\tstate: present\\n\\t\\tloop:\\n\\t\\t\\t- httpd\\n\\t\\t\\t- memcached\\n\\t- name: start service bar and enable it\\n\\t\\tservice:\\n\\t\\t\\tname: bar\\n\\t\\t\\tstate: started\\n\\t\\t\\tenabled: True\\n\\twhen: ansible_facts[\"distribution\"] == \"CentOS\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumBlocks(script).count() print('Number of blocks: ', count) >>> Number of blocks: 1","title":"Number of blocks"},{"location":"playbook/NumBlocks/#number-of-blocks","text":"It returns the number of block in the script. Blocks allow for logical grouping of tasks and in play error handling. Most of what you can apply to a single task (with the exception of loops) can be applied at the block level, which also makes it much easier to set data or directives common to the tasks. This does not mean the directive affects the block itself, but is inherited by the tasks enclosed by a block, i.e. a when will be applied to the tasks, not the block itself.","title":"Number of block's"},{"location":"playbook/NumBlocks/#example","text":"The following example from the Ansible's documentation repository has only one block: - name: Install, configure, and start Apache block: - name: install httpd and memcached yum: name: \"{{ item }}\" state: present loop: - httpd - memcached - name: start service bar and enable it service: name: bar state: started enabled: True when: ansible_facts[\"distribution\"] == \"CentOS\"","title":"Example"},{"location":"playbook/NumBlocks/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blocks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumBlocks/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_blocks import NumBlocks str = '- name: Install, configure, and start Apache\\n\\tblock:\\t\\t\\t\\t \\n\\t- name: install httpd and memcached\\n\\t\\tyum:\\n\\t\\t\\tname: \"{{ item }}\"\\n\\t\\t\\tstate: present\\n\\t\\tloop:\\n\\t\\t\\t- httpd\\n\\t\\t\\t- memcached\\n\\t- name: start service bar and enable it\\n\\t\\tservice:\\n\\t\\t\\tname: bar\\n\\t\\t\\tstate: started\\n\\t\\t\\tenabled: True\\n\\twhen: ansible_facts[\"distribution\"] == \"CentOS\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumBlocks(script).count() print('Number of blocks: ', count) >>> Number of blocks: 1","title":"How to use"},{"location":"playbook/NumBlocksErrorHandling/","text":"Blocks error handling It measures the number of times errors are handled within the blocks in its tasks. Blocks introduce the ability to handle errors in a way similar to exceptions in most programming languages. The tasks in the block would execute normally, if there is any error the rescue section would get executed with whatever you need to do to recover from the previous error. The always section runs no matter what previous error did or did not occur in the block and rescue sections. Example The following example has 1 block error handling. - name: Attempt and graceful roll back demo block: # This block handle errors with rescue and always - debug: msg: 'I execute normally' - name: i force a failure command: /bin/false - debug: msg: 'I never execute, due to the above task failing, :-(' rescue: - debug: msg: 'I caught an error' - name: i force a failure in middle of recovery! >:-) command: /bin/false - debug: msg: 'I also never execute :-(' always: - debug: msg: \"This always executes\" - name: A task with a block that does not handle errors block: # This block does not - debug: msg: 'I execute normally' - name: i force a failure command: /bin/false - debug: msg: 'I never execute, due to the above task failing, :-(' Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blocks error handling Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_blocks_error_handling import NumBlocksErrorHandling str = '- name: Attempt and graceful roll back demo\\n\\tblock:\\t\\t\\t\\t\\t# This block handle errors with rescue and always\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I execute normally\\'\\n\\t\\t- name: i force a failure\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I never execute, due to the above task failing, :-(\\'\\n\\trescue:\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I caught an error\\'\\n\\t\\t- name: i force a failure in middle of recovery! >:-)\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I also never execute :-(\\'\\n\\talways:\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \"This always executes\"\\n\\n- name: A task with a block that does not handle errors\\n\\tblock:\\t\\t\\t\\t# This block does not\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I execute normally\\'\\n\\t\\t- name: i force a failure\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I never execute, due to the above task failing, :-(\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumBlocksErrorHandling(script).count() print('Number of blocks with rescue/always: ', count) >>> Number of blocks with rescue/always: 1","title":"Number of block error handling"},{"location":"playbook/NumBlocksErrorHandling/#blocks-error-handling","text":"It measures the number of times errors are handled within the blocks in its tasks. Blocks introduce the ability to handle errors in a way similar to exceptions in most programming languages. The tasks in the block would execute normally, if there is any error the rescue section would get executed with whatever you need to do to recover from the previous error. The always section runs no matter what previous error did or did not occur in the block and rescue sections.","title":"Blocks error handling"},{"location":"playbook/NumBlocksErrorHandling/#example","text":"The following example has 1 block error handling. - name: Attempt and graceful roll back demo block: # This block handle errors with rescue and always - debug: msg: 'I execute normally' - name: i force a failure command: /bin/false - debug: msg: 'I never execute, due to the above task failing, :-(' rescue: - debug: msg: 'I caught an error' - name: i force a failure in middle of recovery! >:-) command: /bin/false - debug: msg: 'I also never execute :-(' always: - debug: msg: \"This always executes\" - name: A task with a block that does not handle errors block: # This block does not - debug: msg: 'I execute normally' - name: i force a failure command: /bin/false - debug: msg: 'I never execute, due to the above task failing, :-('","title":"Example"},{"location":"playbook/NumBlocksErrorHandling/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of blocks error handling Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumBlocksErrorHandling/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_blocks_error_handling import NumBlocksErrorHandling str = '- name: Attempt and graceful roll back demo\\n\\tblock:\\t\\t\\t\\t\\t# This block handle errors with rescue and always\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I execute normally\\'\\n\\t\\t- name: i force a failure\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I never execute, due to the above task failing, :-(\\'\\n\\trescue:\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I caught an error\\'\\n\\t\\t- name: i force a failure in middle of recovery! >:-)\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I also never execute :-(\\'\\n\\talways:\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \"This always executes\"\\n\\n- name: A task with a block that does not handle errors\\n\\tblock:\\t\\t\\t\\t# This block does not\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I execute normally\\'\\n\\t\\t- name: i force a failure\\n\\t\\t\\tcommand: /bin/false\\n\\t\\t- debug:\\n\\t\\t\\t\\tmsg: \\'I never execute, due to the above task failing, :-(\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumBlocksErrorHandling(script).count() print('Number of blocks with rescue/always: ', count) >>> Number of blocks with rescue/always: 1","title":"How to use"},{"location":"playbook/NumCommands/","text":"Number of commands Comments are non-executable parts of the script that are used for explanation. This property counts the occurrences of the following modules in the script: command : Execute commands on targets; expect : Executes a command and responds to prompts; psexec : Runs commands on a remote Windows host based on the PsExec model; raw : Executes a low-down and dirty command; script : Runs a local script on a remote node after transferring it; shell : Execute shell commands on targets; telnet : Executes a low-down and dirty telnet command. Example The following example has eight commands (the shell command occurs twice). - name: return motd to registered var command: cat /etc/motd register: mymotd - name: Case insensitive password string match expect: command: passwd username responses: (?i)password: \"MySekretPa$$word\" no_log: true - name: Run a cmd.exe command psexec: hostname: server connection_username: username connection_password: password executable: cmd.exe arguments: /c echo Hello World - name: List user accounts on a Windows system raw: Get-WmiObject -Class Win32_UserAccount - name: Run a script with arguments (free form) script: /some/local/script.sh --some-argument 1234 - name: Execute the command in remote shell; stdout goes to the specified file on the remote. shell: somescript.sh >> somelog.txt - name: Change the working directory to somedir/ before executing the command. shell: somescript.sh >> somelog.txt args: chdir: somedir/ - name: run show commands telnet: user: cisco password: cisco login_prompt: \"Username: \" prompts: - \"[>#]\" command: - terminal length 0 - show version Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of commands Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_commands import NumCommands str = ''- name: return motd to registered var\\n\\tcommand: cat /etc/motd\\n\\tregister: mymotd\\n\\n- name: Case insensitive password string match\\n\\texpect:\\n\\t\\tcommand: passwd username\\n\\t\\tresponses:\\n\\t\\t\\t(?i)password: \"MySekretPa$$word\"\\n\\tno_log: true\\n\\n- name: Run a cmd.exe command\\n\\tpsexec:\\n\\t\\thostname: server\\n\\t\\tconnection_username: username\\n\\t\\tconnection_password: password\\n\\t\\texecutable: cmd.exe\\n\\t\\targuments: /c echo Hello World\\n\\n- name: List user accounts on a Windows system\\n\\traw: Get-WmiObject -Class Win32_UserAccount\\n\\n- name: Run a script with arguments (free form)\\n\\tscript: /some/local/script.sh --some-argument 1234\\n\\n- name: Execute the command in remote shell; stdout goes to the specified file on the remote.\\n\\tshell: somescript.sh >> somelog.txt\\n\\n- name: Change the working directory to somedir/ before executing the command.\\n\\tshell: somescript.sh >> somelog.txt\\n\\targs:\\n\\t\\tchdir: somedir/\\n\\n- name: run show commands\\n\\ttelnet:\\n\\t\\tuser: cisco\\n\\t\\tpassword: cisco\\n\\t\\tlogin_prompt: \"Username: \"\\n\\t\\tprompts:\\n\\t\\t\\t- \"[>#]\"\\n\\t\\tcommand:\\n\\t\\t\\t- terminal length 0\\n\\t\\t\\t- show version'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumCommands(script).count() print('Number of commands occurrences: ', count) >>> Number of commands occurrences: 8","title":"Number of commands"},{"location":"playbook/NumCommands/#number-of-commands","text":"Comments are non-executable parts of the script that are used for explanation. This property counts the occurrences of the following modules in the script: command : Execute commands on targets; expect : Executes a command and responds to prompts; psexec : Runs commands on a remote Windows host based on the PsExec model; raw : Executes a low-down and dirty command; script : Runs a local script on a remote node after transferring it; shell : Execute shell commands on targets; telnet : Executes a low-down and dirty telnet command.","title":"Number of commands"},{"location":"playbook/NumCommands/#example","text":"The following example has eight commands (the shell command occurs twice). - name: return motd to registered var command: cat /etc/motd register: mymotd - name: Case insensitive password string match expect: command: passwd username responses: (?i)password: \"MySekretPa$$word\" no_log: true - name: Run a cmd.exe command psexec: hostname: server connection_username: username connection_password: password executable: cmd.exe arguments: /c echo Hello World - name: List user accounts on a Windows system raw: Get-WmiObject -Class Win32_UserAccount - name: Run a script with arguments (free form) script: /some/local/script.sh --some-argument 1234 - name: Execute the command in remote shell; stdout goes to the specified file on the remote. shell: somescript.sh >> somelog.txt - name: Change the working directory to somedir/ before executing the command. shell: somescript.sh >> somelog.txt args: chdir: somedir/ - name: run show commands telnet: user: cisco password: cisco login_prompt: \"Username: \" prompts: - \"[>#]\" command: - terminal length 0 - show version","title":"Example"},{"location":"playbook/NumCommands/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of commands Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumCommands/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_commands import NumCommands str = ''- name: return motd to registered var\\n\\tcommand: cat /etc/motd\\n\\tregister: mymotd\\n\\n- name: Case insensitive password string match\\n\\texpect:\\n\\t\\tcommand: passwd username\\n\\t\\tresponses:\\n\\t\\t\\t(?i)password: \"MySekretPa$$word\"\\n\\tno_log: true\\n\\n- name: Run a cmd.exe command\\n\\tpsexec:\\n\\t\\thostname: server\\n\\t\\tconnection_username: username\\n\\t\\tconnection_password: password\\n\\t\\texecutable: cmd.exe\\n\\t\\targuments: /c echo Hello World\\n\\n- name: List user accounts on a Windows system\\n\\traw: Get-WmiObject -Class Win32_UserAccount\\n\\n- name: Run a script with arguments (free form)\\n\\tscript: /some/local/script.sh --some-argument 1234\\n\\n- name: Execute the command in remote shell; stdout goes to the specified file on the remote.\\n\\tshell: somescript.sh >> somelog.txt\\n\\n- name: Change the working directory to somedir/ before executing the command.\\n\\tshell: somescript.sh >> somelog.txt\\n\\targs:\\n\\t\\tchdir: somedir/\\n\\n- name: run show commands\\n\\ttelnet:\\n\\t\\tuser: cisco\\n\\t\\tpassword: cisco\\n\\t\\tlogin_prompt: \"Username: \"\\n\\t\\tprompts:\\n\\t\\t\\t- \"[>#]\"\\n\\t\\tcommand:\\n\\t\\t\\t- terminal length 0\\n\\t\\t\\t- show version'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumCommands(script).count() print('Number of commands occurrences: ', count) >>> Number of commands occurrences: 8","title":"How to use"},{"location":"playbook/NumDeprecatedModules/","text":"Number of deprecated modules It measures the number of times tasks call deprecated Ansible modules . Example The following example is a playbook containing one depecrated module, occurring twice, namely oc : - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: # non deprecated module file: username_info.yml - name: Create a service oc: # deprecated module state: present name: myservice namespace: mynamespace kind: Service - name: Delete a service oc: # deprecated module state: absent name: myservice namespace: mynamespace kind: Service Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of deprecated modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_deprecated_modules import NumDeprecatedModules str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: Create a service\\n\\toc:\\n\\t\\tstate: present\\n\\t\\tname: myservice\\n\\t\\tnamespace: mynamespace\\n\\t\\tkind: Service\\n\\n- name: Delete a service\\n\\toc:\\n\\t\\tstate: absent\\n\\t\\tname: myservice\\n\\t\\tnamespace: mynamespace\\n\\t\\tkind: Service' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDeprecatedModules(script).count() print('Number of deprecated modules: ', count) >>> Number of deprecated modules: 2","title":"Number of deprecated modules"},{"location":"playbook/NumDeprecatedModules/#number-of-deprecated-modules","text":"It measures the number of times tasks call deprecated Ansible modules .","title":"Number of deprecated modules"},{"location":"playbook/NumDeprecatedModules/#example","text":"The following example is a playbook containing one depecrated module, occurring twice, namely oc : - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: # non deprecated module file: username_info.yml - name: Create a service oc: # deprecated module state: present name: myservice namespace: mynamespace kind: Service - name: Delete a service oc: # deprecated module state: absent name: myservice namespace: mynamespace kind: Service","title":"Example"},{"location":"playbook/NumDeprecatedModules/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of deprecated modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumDeprecatedModules/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_deprecated_modules import NumDeprecatedModules str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: Create a service\\n\\toc:\\n\\t\\tstate: present\\n\\t\\tname: myservice\\n\\t\\tnamespace: mynamespace\\n\\t\\tkind: Service\\n\\n- name: Delete a service\\n\\toc:\\n\\t\\tstate: absent\\n\\t\\tname: myservice\\n\\t\\tnamespace: mynamespace\\n\\t\\tkind: Service' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDeprecatedModules(script).count() print('Number of deprecated modules: ', count) >>> Number of deprecated modules: 2","title":"How to use"},{"location":"playbook/NumDistinctModules/","text":"Number of distinct modules It measures the number of distinct Ansible modules in the script. This metric differs from NumTasks as it counts for the number of distinct modules in the script, without duplicates. If a module occurs twice or more among tasks it is counted only once. Remember that the goal of a task is to execute a module, so the total number of modules (with duplicates) equals the number of tasks. Example The following example from the ansible-examples repository has three distinct modules, namely: include_vars , uri and debug : - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: # 1st distinct module file: username_info.yml - name: GRAB HUE LIGHT INFORMATION uri: # 2nd distinct module url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW debug: # 3rd distinct module var: light_info.json.lights Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of distinct modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_distinct_modules import NumDistinctModules str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: \"{{body_info|to_json}}\"\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDistinctModules(script).count() print('Number of distinct modules: ', count) >>> Number of distinct modules: 3","title":"Number of distinct modules"},{"location":"playbook/NumDistinctModules/#number-of-distinct-modules","text":"It measures the number of distinct Ansible modules in the script. This metric differs from NumTasks as it counts for the number of distinct modules in the script, without duplicates. If a module occurs twice or more among tasks it is counted only once. Remember that the goal of a task is to execute a module, so the total number of modules (with duplicates) equals the number of tasks.","title":"Number of distinct modules"},{"location":"playbook/NumDistinctModules/#example","text":"The following example from the ansible-examples repository has three distinct modules, namely: include_vars , uri and debug : - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML include_vars: # 1st distinct module file: username_info.yml - name: GRAB HUE LIGHT INFORMATION uri: # 2nd distinct module url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW debug: # 3rd distinct module var: light_info.json.lights","title":"Example"},{"location":"playbook/NumDistinctModules/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of distinct modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumDistinctModules/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_distinct_modules import NumDistinctModules str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: \"{{body_info|to_json}}\"\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumDistinctModules(script).count() print('Number of distinct modules: ', count) >>> Number of distinct modules: 3","title":"How to use"},{"location":"playbook/NumExternalModules/","text":"Number of external modules It measures the number of external modules in the script not belonging to the core Ansible or not maintained by the Ansible community. Example The following example has 2 facts modules and three modules in total. - name: ensure foo file: # Core module path: /tmp/foo state: touch - name: do a remote copy remote_copy: # External module source: /tmp/foo dest: /tmp/bar Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of external modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_external_modules import NumExternalModules str = '- name: ensure foo\\n\\tfile:\\n\\t\\tpath: /tmp/foo\\n\\t\\tstate: touch\\n\\n- name: do a remote copy\\n\\tremote_copy:\\n\\t\\tsource: /tmp/foo\\n\\t\\tdest: /tmp/bar' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumExternalModules(script).count() print('Number of external modules: ', count) >>> Number of external modules: 1","title":"Number of external modules"},{"location":"playbook/NumExternalModules/#number-of-external-modules","text":"It measures the number of external modules in the script not belonging to the core Ansible or not maintained by the Ansible community.","title":"Number of external modules"},{"location":"playbook/NumExternalModules/#example","text":"The following example has 2 facts modules and three modules in total. - name: ensure foo file: # Core module path: /tmp/foo state: touch - name: do a remote copy remote_copy: # External module source: /tmp/foo dest: /tmp/bar","title":"Example"},{"location":"playbook/NumExternalModules/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of external modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumExternalModules/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_external_modules import NumExternalModules str = '- name: ensure foo\\n\\tfile:\\n\\t\\tpath: /tmp/foo\\n\\t\\tstate: touch\\n\\n- name: do a remote copy\\n\\tremote_copy:\\n\\t\\tsource: /tmp/foo\\n\\t\\tdest: /tmp/bar' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumExternalModules(script).count() print('Number of external modules: ', count) >>> Number of external modules: 1","title":"How to use"},{"location":"playbook/NumFactModules/","text":"Number of fact modules It measures the number of facts modules in the script. Fact modules are modules that do not alter state but rather return data. Knowing the number of fact modules in a playbook could represent a measure of the responsibility of the playbook. The assumption is that the lower the fact modules wrt the total number of modules in the script, the more unstable is the behaviour of the class, as the other modules alter its state. Example The following example has 2 facts modules and three modules in total. tasks: - name: Find all instances in the specified region ali_instance_facts: # 1st fact module alicloud_access_key: '{{ alicloud_access_key }}' alicloud_secret_key: '{{ alicloud_secret_key }}' alicloud_region: '{{ alicloud_region }}' register: all_instances - name: Find all instances based on the specified ids ali_instance_facts: # 2nd fact module alicloud_access_key: '{{ alicloud_access_key }}' alicloud_secret_key: '{{ alicloud_secret_key }}' alicloud_region: '{{ alicloud_region }}' register: instances_by_ids - name: PRINT DATA TO TERMINAL WINDOW debug: # not fact module msg: 'End of tasks' Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of fact modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_fact_modules import NumFactModules str = 'tasks:\\n\\t- name: Find all instances in the specified region\\t\\t\\n\\t\\tali_instance_facts:\\n\\t\\t\\talicloud_access_key: \"{{ alicloud_access_key }}\"\\n\\t\\t\\talicloud_secret_key: \"{{ alicloud_secret_key }}\"\\n\\t\\t\\talicloud_region: \"{{ alicloud_region }}\"\\n\\t\\tregister: all_instances\\n\\n\\t- name: Find all instances based on the specified ids\\n\\t\\tali_instance_facts:\\n\\t\\t\\talicloud_access_key: \"{{ alicloud_access_key }}\"\\n\\t\\t\\talicloud_secret_key: \"{{ alicloud_secret_key }}\"\\n\\t\\t\\talicloud_region: \"{{ alicloud_region }}\"\\n\\t\\tregister: instances_by_ids\\n\\n\\t- name: PRINT DATA TO TERMINAL WINDOW\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"End of tasks\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFactModules(script).count() print('Number of fact modules: ', count) >>> Number of fact modules: 2","title":"Number of fact modules"},{"location":"playbook/NumFactModules/#number-of-fact-modules","text":"It measures the number of facts modules in the script. Fact modules are modules that do not alter state but rather return data. Knowing the number of fact modules in a playbook could represent a measure of the responsibility of the playbook. The assumption is that the lower the fact modules wrt the total number of modules in the script, the more unstable is the behaviour of the class, as the other modules alter its state.","title":"Number of fact modules"},{"location":"playbook/NumFactModules/#example","text":"The following example has 2 facts modules and three modules in total. tasks: - name: Find all instances in the specified region ali_instance_facts: # 1st fact module alicloud_access_key: '{{ alicloud_access_key }}' alicloud_secret_key: '{{ alicloud_secret_key }}' alicloud_region: '{{ alicloud_region }}' register: all_instances - name: Find all instances based on the specified ids ali_instance_facts: # 2nd fact module alicloud_access_key: '{{ alicloud_access_key }}' alicloud_secret_key: '{{ alicloud_secret_key }}' alicloud_region: '{{ alicloud_region }}' register: instances_by_ids - name: PRINT DATA TO TERMINAL WINDOW debug: # not fact module msg: 'End of tasks'","title":"Example"},{"location":"playbook/NumFactModules/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of fact modules Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumFactModules/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_fact_modules import NumFactModules str = 'tasks:\\n\\t- name: Find all instances in the specified region\\t\\t\\n\\t\\tali_instance_facts:\\n\\t\\t\\talicloud_access_key: \"{{ alicloud_access_key }}\"\\n\\t\\t\\talicloud_secret_key: \"{{ alicloud_secret_key }}\"\\n\\t\\t\\talicloud_region: \"{{ alicloud_region }}\"\\n\\t\\tregister: all_instances\\n\\n\\t- name: Find all instances based on the specified ids\\n\\t\\tali_instance_facts:\\n\\t\\t\\talicloud_access_key: \"{{ alicloud_access_key }}\"\\n\\t\\t\\talicloud_secret_key: \"{{ alicloud_secret_key }}\"\\n\\t\\t\\talicloud_region: \"{{ alicloud_region }}\"\\n\\t\\tregister: instances_by_ids\\n\\n\\t- name: PRINT DATA TO TERMINAL WINDOW\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"End of tasks\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFactModules(script).count() print('Number of fact modules: ', count) >>> Number of fact modules: 2","title":"How to use"},{"location":"playbook/NumFileExists/","text":"Number of check for file/dir existence The module stat retrieves facts for a file similar to the Linux/Unix \u2018stat\u2019 command, and can be used to check for the existence of a file or directory. This property counts the number of *.(win_)?stat.* is (not)? defined syntax occurrences, to check if the file or directory exist. Example The following example has two mode occurrences. # Determine if a path exists and is a symlink. Note that if the path does # not exist, and we test sym.stat.islnk, it will fail with an error. So # therefore, we must test whether it is defined. # Run this to understand the structure, the skipped ones do not pass the # check performed by 'when' - stat: path: /path/to/something register: sym - debug: msg: \"islnk isn't defined (path doesn't exist)\" when: sym.stat.islnk is not defined # file check Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of checks for file existence Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_exists import NumFileExists str = '- stat:\\n\\t\\tpath: /path/to/something\\n\\tregister: sym\\n\\n- debug:\\n\\t\\tmsg: \"islnk is not defined (path does not exist)\"\\n\\twhen: sym.stat.islnk is not defined' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileExists(script).count() print('Number of file checks: ', count) >>> Number of file checks: 1","title":"Number of file extists"},{"location":"playbook/NumFileExists/#number-of-check-for-filedir-existence","text":"The module stat retrieves facts for a file similar to the Linux/Unix \u2018stat\u2019 command, and can be used to check for the existence of a file or directory. This property counts the number of *.(win_)?stat.* is (not)? defined syntax occurrences, to check if the file or directory exist.","title":"Number of check for file/dir existence"},{"location":"playbook/NumFileExists/#example","text":"The following example has two mode occurrences. # Determine if a path exists and is a symlink. Note that if the path does # not exist, and we test sym.stat.islnk, it will fail with an error. So # therefore, we must test whether it is defined. # Run this to understand the structure, the skipped ones do not pass the # check performed by 'when' - stat: path: /path/to/something register: sym - debug: msg: \"islnk isn't defined (path doesn't exist)\" when: sym.stat.islnk is not defined # file check","title":"Example"},{"location":"playbook/NumFileExists/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of checks for file existence Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumFileExists/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_exists import NumFileExists str = '- stat:\\n\\t\\tpath: /path/to/something\\n\\tregister: sym\\n\\n- debug:\\n\\t\\tmsg: \"islnk is not defined (path does not exist)\"\\n\\twhen: sym.stat.islnk is not defined' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileExists(script).count() print('Number of file checks: ', count) >>> Number of file checks: 1","title":"How to use"},{"location":"playbook/NumFileMode/","text":"Number of mode in file modules File mode is a source code property used to manage files, directories and symblic links. This property counts the number of mode syntax occurrences, used to set the permissions a file or a directory should have. Example The following example has two mode occurrences. - name: Change file ownership, group and permissions file: path: /etc/foo.conf owner: foo group: foo mode: '0644' # 1st occurrence - name: Replace a localhost entry with our own lineinfile: path: /etc/hosts regexp: '^127\\.0\\.0\\.1' line: 127.0.0.1 localhost owner: root group: root mode: '0644' # 2nd occurrence Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of file mode Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_mode import NumFileMode str = '- name: Change file ownership, group and permissions\\n\\tfile:\\n\\t\\tpath: /etc/foo.conf\\n\\t\\towner: foo\\n\\t\\tgroup: foo\\n\\t\\tmode: \\'0644\\'\\n\\n- name: Replace a localhost entry with our own\\n\\tlineinfile:\\n\\t\\tpath: /etc/hosts\\n\\t\\tregexp: \\'^127\\.0\\.0\\.1\\'\\n\\t\\tline: 127.0.0.1 localhost\\n\\t\\towner: root\\n\\t\\tgroup: root\\n\\t\\tmode: \\'0644\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileMode(script).count() print('Number of file mode occurrences: ', count) >>> Number of file mode occurrences: 2","title":"Number of file mode"},{"location":"playbook/NumFileMode/#number-of-mode-in-file-modules","text":"File mode is a source code property used to manage files, directories and symblic links. This property counts the number of mode syntax occurrences, used to set the permissions a file or a directory should have.","title":"Number of mode in file modules"},{"location":"playbook/NumFileMode/#example","text":"The following example has two mode occurrences. - name: Change file ownership, group and permissions file: path: /etc/foo.conf owner: foo group: foo mode: '0644' # 1st occurrence - name: Replace a localhost entry with our own lineinfile: path: /etc/hosts regexp: '^127\\.0\\.0\\.1' line: 127.0.0.1 localhost owner: root group: root mode: '0644' # 2nd occurrence","title":"Example"},{"location":"playbook/NumFileMode/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of file mode Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumFileMode/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_mode import NumFileMode str = '- name: Change file ownership, group and permissions\\n\\tfile:\\n\\t\\tpath: /etc/foo.conf\\n\\t\\towner: foo\\n\\t\\tgroup: foo\\n\\t\\tmode: \\'0644\\'\\n\\n- name: Replace a localhost entry with our own\\n\\tlineinfile:\\n\\t\\tpath: /etc/hosts\\n\\t\\tregexp: \\'^127\\.0\\.0\\.1\\'\\n\\t\\tline: 127.0.0.1 localhost\\n\\t\\towner: root\\n\\t\\tgroup: root\\n\\t\\tmode: \\'0644\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileMode(script).count() print('Number of file mode occurrences: ', count) >>> Number of file mode occurrences: 2","title":"How to use"},{"location":"playbook/NumFileModules/","text":"Number of file modules The file module manage files and file properties. This property counts the number of file syntax occurrences. Example The following example has two file occurrences. - name: Change file ownership, group and permissions file: path: /etc/foo.conf owner: foo group: foo mode: '0644' - name: Give insecure permissions to an existing file file: path: /work owner: root group: root mode: '1777' Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of commands Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_modules import NumFileModules str = '- name: Change file ownership, group and permissions\\n\\tfile:\\n\\t\\tpath: /etc/foo.conf\\n\\t\\towner: foo\\n\\t\\tgroup: foo\\n\\t\\tmode: \\'0644\\'\\n\\n- name: Give insecure permissions to an existing file\\n\\tfile:\\n\\t\\tpath: /work\\n\\t\\towner: root\\n\\t\\tgroup: root\\n\\t\\tmode: \\'1777\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileModules(script).count() print('Number of file occurrences: ', count) >>> Number of file occurrences: 2","title":"Number of file modules"},{"location":"playbook/NumFileModules/#number-of-file-modules","text":"The file module manage files and file properties. This property counts the number of file syntax occurrences.","title":"Number of file modules"},{"location":"playbook/NumFileModules/#example","text":"The following example has two file occurrences. - name: Change file ownership, group and permissions file: path: /etc/foo.conf owner: foo group: foo mode: '0644' - name: Give insecure permissions to an existing file file: path: /work owner: root group: root mode: '1777'","title":"Example"},{"location":"playbook/NumFileModules/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of occurrences of commands Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumFileModules/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_file_modules import NumFileModules str = '- name: Change file ownership, group and permissions\\n\\tfile:\\n\\t\\tpath: /etc/foo.conf\\n\\t\\towner: foo\\n\\t\\tgroup: foo\\n\\t\\tmode: \\'0644\\'\\n\\n- name: Give insecure permissions to an existing file\\n\\tfile:\\n\\t\\tpath: /work\\n\\t\\towner: root\\n\\t\\tgroup: root\\n\\t\\tmode: \\'1777\\'' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFileModules(script).count() print('Number of file occurrences: ', count) >>> Number of file occurrences: 2","title":"How to use"},{"location":"playbook/NumFilters/","text":"Number of filters It measures the number of filters in the script. Example The following example from the Ansible's documentation has two filters, namely from_yaml_all and list : tasks: - shell: cat /some/path/to/multidoc-file.yaml register: result - debug: msg: '{{ item }}' loop: '{{ result.stdout | from_yaml_all | list }}' # 2 filters Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of filters Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_filters import NumFilters str = 'tasks:\\n\\t- shell: cat /some/path/to/multidoc-file.yaml\\n\\t\\tregister: result\\n\\t- debug:\\n\\t\\t\\tmsg: '{{ item }}'\\n\\t\\tloop: \"{{ result.stdout | from_yaml_all | list }}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFilters(script).count() print('Number of filters: ', count) >>> Number of filters: 2","title":"Number of filters"},{"location":"playbook/NumFilters/#number-of-filters","text":"It measures the number of filters in the script.","title":"Number of filters"},{"location":"playbook/NumFilters/#example","text":"The following example from the Ansible's documentation has two filters, namely from_yaml_all and list : tasks: - shell: cat /some/path/to/multidoc-file.yaml register: result - debug: msg: '{{ item }}' loop: '{{ result.stdout | from_yaml_all | list }}' # 2 filters","title":"Example"},{"location":"playbook/NumFilters/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of filters Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumFilters/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_filters import NumFilters str = 'tasks:\\n\\t- shell: cat /some/path/to/multidoc-file.yaml\\n\\t\\tregister: result\\n\\t- debug:\\n\\t\\t\\tmsg: '{{ item }}'\\n\\t\\tloop: \"{{ result.stdout | from_yaml_all | list }}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumFilters(script).count() print('Number of filters: ', count) >>> Number of filters: 2","title":"How to use"},{"location":"playbook/NumIgnoreErrors/","text":"Number of ignore_errors It measures the number of ignore_errors in the script. Ignoring errors is considered as a bad practice, since ignore errors only obscures error handling; there are better ways for handling errors . Example The following example from the Ansible's documentation repository has one ignore_errors (but it could be at least one per task): - name: this will not be counted as a failure command: /bin/false ignore_errors: yes Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of ignore_errors: yes Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_ignore_errors import NumIgnoreErrors str = '- name: this will not be counted as a failure\\n\\tcommand: /bin/false\\n\\tignore_errors: yes' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIgnoreErrors(script).count() print('Number of ignore_errors: ', count) >>> Number of ignore_errors: 1","title":"Number of ignore_errors"},{"location":"playbook/NumIgnoreErrors/#number-of-ignore_errors","text":"It measures the number of ignore_errors in the script. Ignoring errors is considered as a bad practice, since ignore errors only obscures error handling; there are better ways for handling errors .","title":"Number of ignore_errors"},{"location":"playbook/NumIgnoreErrors/#example","text":"The following example from the Ansible's documentation repository has one ignore_errors (but it could be at least one per task): - name: this will not be counted as a failure command: /bin/false ignore_errors: yes","title":"Example"},{"location":"playbook/NumIgnoreErrors/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of ignore_errors: yes Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumIgnoreErrors/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_ignore_errors import NumIgnoreErrors str = '- name: this will not be counted as a failure\\n\\tcommand: /bin/false\\n\\tignore_errors: yes' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIgnoreErrors(script).count() print('Number of ignore_errors: ', count) >>> Number of ignore_errors: 1","title":"How to use"},{"location":"playbook/NumImportPlaybook/","text":"Number of import_playbook It measures the number of import_playbook statements in the script. Example The following example has two import_playbook statements. - name: Include a play after another play import_playbook: otherplays.yaml - name: This fails because I'm inside a play already import_playbook: stuff.yaml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_playbook Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_playbook import NumImportPlaybook str = '- name: Include a play after another play\\n\\timport_playbook: otherplays.yaml\\n\\n- name: This fails because I am inside a play already\\n\\timport_playbook: stuff.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportPlaybook(script).count() print('Number of import_playbook: ', count) >>> Number of import_playbook: 2","title":"Number of import_playbook"},{"location":"playbook/NumImportPlaybook/#number-of-import_playbook","text":"It measures the number of import_playbook statements in the script.","title":"Number of import_playbook"},{"location":"playbook/NumImportPlaybook/#example","text":"The following example has two import_playbook statements. - name: Include a play after another play import_playbook: otherplays.yaml - name: This fails because I'm inside a play already import_playbook: stuff.yaml","title":"Example"},{"location":"playbook/NumImportPlaybook/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_playbook Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumImportPlaybook/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_playbook import NumImportPlaybook str = '- name: Include a play after another play\\n\\timport_playbook: otherplays.yaml\\n\\n- name: This fails because I am inside a play already\\n\\timport_playbook: stuff.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportPlaybook(script).count() print('Number of import_playbook: ', count) >>> Number of import_playbook: 2","title":"How to use"},{"location":"playbook/NumImportRole/","text":"Number of import_role It measures the number of import_role statements in the script. Example The following example has two import_role statements. - import_role: name: myrole - name: Run tasks/other.yaml instead of \"main\" import_role: name: myrole tasks_from: other Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_role Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_role import NumImportRole str = '- import_role:\\n\\t\\tname: myrole\\n\\n- name: Run tasks/other.yaml instead of \"main\"\\n\\timport_role:\\n\\t\\tname: myrole\\n\\t\\ttasks_from: other' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportRole(script).count() print('Number of import_role: ', count) >>> Number of import_role: 2","title":"Number of import_role"},{"location":"playbook/NumImportRole/#number-of-import_role","text":"It measures the number of import_role statements in the script.","title":"Number of import_role"},{"location":"playbook/NumImportRole/#example","text":"The following example has two import_role statements. - import_role: name: myrole - name: Run tasks/other.yaml instead of \"main\" import_role: name: myrole tasks_from: other","title":"Example"},{"location":"playbook/NumImportRole/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_role Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumImportRole/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_role import NumImportRole str = '- import_role:\\n\\t\\tname: myrole\\n\\n- name: Run tasks/other.yaml instead of \"main\"\\n\\timport_role:\\n\\t\\tname: myrole\\n\\t\\ttasks_from: other' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportRole(script).count() print('Number of import_role: ', count) >>> Number of import_role: 2","title":"How to use"},{"location":"playbook/NumImportTasks/","text":"Number of import_tasks It measures the number of import_tasks statements in the script. Example The following example has two import_tasks statements. - name: Include task list in play import_tasks: stuff.yaml - name: Apply conditional to all imported tasks import_tasks: stuff.yaml when: hostvar is defined Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_tasks import NumImportTasks str = '- name: Include task list in play\\n\\timport_tasks: stuff.yaml\\n\\n- name: Apply conditional to all imported tasks\\n\\timport_tasks: stuff.yaml\\n\\twhen: hostvar is defined' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportTasks(script).count() print('Number of import_tasks: ', count) >>> Number of import_tasks: 2","title":"Number of import_tasks"},{"location":"playbook/NumImportTasks/#number-of-import_tasks","text":"It measures the number of import_tasks statements in the script.","title":"Number of import_tasks"},{"location":"playbook/NumImportTasks/#example","text":"The following example has two import_tasks statements. - name: Include task list in play import_tasks: stuff.yaml - name: Apply conditional to all imported tasks import_tasks: stuff.yaml when: hostvar is defined","title":"Example"},{"location":"playbook/NumImportTasks/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of import_tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumImportTasks/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_import_tasks import NumImportTasks str = '- name: Include task list in play\\n\\timport_tasks: stuff.yaml\\n\\n- name: Apply conditional to all imported tasks\\n\\timport_tasks: stuff.yaml\\n\\twhen: hostvar is defined' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumImportTasks(script).count() print('Number of import_tasks: ', count) >>> Number of import_tasks: 2","title":"How to use"},{"location":"playbook/NumInclude/","text":"Number of include It measures the number of include statements in the script. Example The following example has one include statement. --- - name: Include a play after another play include: otherplays.yaml - name: Include task list in play include_role: role.yaml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include import NumInclude str = '---\\n- name: Include a play after another play\\n\\tinclude: otherplays.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumInclude(script).count() print('Number of include: ', count) >>> Number of include: 1","title":"Number of include"},{"location":"playbook/NumInclude/#number-of-include","text":"It measures the number of include statements in the script.","title":"Number of include"},{"location":"playbook/NumInclude/#example","text":"The following example has one include statement. --- - name: Include a play after another play include: otherplays.yaml - name: Include task list in play include_role: role.yaml","title":"Example"},{"location":"playbook/NumInclude/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumInclude/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include import NumInclude str = '---\\n- name: Include a play after another play\\n\\tinclude: otherplays.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumInclude(script).count() print('Number of include: ', count) >>> Number of include: 1","title":"How to use"},{"location":"playbook/NumIncludeRole/","text":"Number of include_role It measures the number of include_role statements in the script. Example The following example has one include_role statement. --- - name: Include a play after another play include: otherplays.yaml - name: Include task list in play include_role: role.yaml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_role Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_role import NumIncludeRole str = '---\\n- name: Include a play after another play\\n\\tinclude: otherplays.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeRole(script).count() print('Number of include_role: ', count) >>> Number of include_role: 1","title":"Number of include_role"},{"location":"playbook/NumIncludeRole/#number-of-include_role","text":"It measures the number of include_role statements in the script.","title":"Number of include_role"},{"location":"playbook/NumIncludeRole/#example","text":"The following example has one include_role statement. --- - name: Include a play after another play include: otherplays.yaml - name: Include task list in play include_role: role.yaml","title":"Example"},{"location":"playbook/NumIncludeRole/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_role Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumIncludeRole/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_role import NumIncludeRole str = '---\\n- name: Include a play after another play\\n\\tinclude: otherplays.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeRole(script).count() print('Number of include_role: ', count) >>> Number of include_role: 1","title":"How to use"},{"location":"playbook/NumIncludeTasks/","text":"Number of include_tasks It measures the number of include_tasks statements in the script. Example The following example has two include_tasks statements. --- - name: Include task list in play include_tasks: stuff.yaml - name: Apply tags to tasks within included file include_tasks: file: install.yml apply: tags: - install Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_tasks import NumIncludeTasks str = '---\\n- name: Include task list in play\\n\\tinclude_tasks: stuff.yaml\\n\\n- name: Apply tags to tasks within included file\\n\\tinclude_tasks:\\n\\t\\tfile: install.yml\\n\\t\\tapply:\\n\\t\\t\\ttags:\\n\\t\\t\\t\\t- install' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeTasks(script).count() print('Number of include_tasks: ', count) >>> Number of include_tasks: 2","title":"Number of include_tasks"},{"location":"playbook/NumIncludeTasks/#number-of-include_tasks","text":"It measures the number of include_tasks statements in the script.","title":"Number of include_tasks"},{"location":"playbook/NumIncludeTasks/#example","text":"The following example has two include_tasks statements. --- - name: Include task list in play include_tasks: stuff.yaml - name: Apply tags to tasks within included file include_tasks: file: install.yml apply: tags: - install","title":"Example"},{"location":"playbook/NumIncludeTasks/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumIncludeTasks/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_tasks import NumIncludeTasks str = '---\\n- name: Include task list in play\\n\\tinclude_tasks: stuff.yaml\\n\\n- name: Apply tags to tasks within included file\\n\\tinclude_tasks:\\n\\t\\tfile: install.yml\\n\\t\\tapply:\\n\\t\\t\\ttags:\\n\\t\\t\\t\\t- install' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeTasks(script).count() print('Number of include_tasks: ', count) >>> Number of include_tasks: 2","title":"How to use"},{"location":"playbook/NumIncludeVars/","text":"Number of include_vars It measures the number of include_vars statements in the script. Example The following example has one include_vars statement. --- - name: Include a play after another play include_vars: myvars.yaml - name: Include task list in play include_role: role.yaml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_vars Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_vars import NumIncludeVars str = '- name: Include a play after another play\\n\\tinclude_vars: myvars.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeVars(script).count() print('Number of include_vars: ', count) >>> Number of include_vars: 1","title":"Number of include_vars"},{"location":"playbook/NumIncludeVars/#number-of-include_vars","text":"It measures the number of include_vars statements in the script.","title":"Number of include_vars"},{"location":"playbook/NumIncludeVars/#example","text":"The following example has one include_vars statement. --- - name: Include a play after another play include_vars: myvars.yaml - name: Include task list in play include_role: role.yaml","title":"Example"},{"location":"playbook/NumIncludeVars/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of include_vars Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumIncludeVars/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_include_vars import NumIncludeVars str = '- name: Include a play after another play\\n\\tinclude_vars: myvars.yaml\\n\\n- name: Include task list in play\\n\\tinclude_role: role.yaml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumIncludeVars(script).count() print('Number of include_vars: ', count) >>> Number of include_vars: 1","title":"How to use"},{"location":"playbook/NumLookups/","text":"Number of lookups It measures the number of times it accesses data from outside source . Lookups are evaluated when the task referencing them is executed, which allows for dynamic data discovery. To reuse a particular lookup in multiple tasks and re-evaluate it each time, a playbook variable can be defined with a lookup value. Each time the playbook variable is referenced the lookup will be executed, potentially providing different values over time. Example The following example from the Ansible's documentation has one lookup : - hosts: all vars: contents: \"{{ lookup('file', '/etc/foo.txt') }}\" # lookup Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of lookups Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_lookups import NumLookups str = '- hosts: all\\n\\tvars:\\n\\t\\tcontents: \"{{ lookup('file', '/etc/foo.txt') }}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumLookups(script).count() print('Number of lookups: ', count) >>> Number of lookups: 1","title":"Number of lookups"},{"location":"playbook/NumLookups/#number-of-lookups","text":"It measures the number of times it accesses data from outside source . Lookups are evaluated when the task referencing them is executed, which allows for dynamic data discovery. To reuse a particular lookup in multiple tasks and re-evaluate it each time, a playbook variable can be defined with a lookup value. Each time the playbook variable is referenced the lookup will be executed, potentially providing different values over time.","title":"Number of lookups"},{"location":"playbook/NumLookups/#example","text":"The following example from the Ansible's documentation has one lookup : - hosts: all vars: contents: \"{{ lookup('file', '/etc/foo.txt') }}\" # lookup","title":"Example"},{"location":"playbook/NumLookups/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of lookups Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumLookups/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_lookups import NumLookups str = '- hosts: all\\n\\tvars:\\n\\t\\tcontents: \"{{ lookup('file', '/etc/foo.txt') }}\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumLookups(script).count() print('Number of lookups: ', count) >>> Number of lookups: 1","title":"How to use"},{"location":"playbook/NumLoops/","text":"Number of loops It measures the number of loops in the script. Example The following example has two loops indicated by the keywords loop and with_* --- - name: with_list debug: msg: \"{{ item }}\" with_list: # 1st loop - one - two - name: with_list -> loop debug: msg: \"{{ item }}\" loop: # 2nd loop - one - two Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of loops Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_loops import NumLoops str = '- name: with_list\\n\\tdebug:\\n\\t\\tmsg: \"{{ item }}\"\\n\\twith_list:\\n\\t\\t- one\\n\\t\\t- two\\n\\n- name: with_list -> loop\\n\\tdebug:\\n\\t\\tmsg: \"{{ item }}\"\\n\\tloop:\\n\\t\\t- one\\n\\t\\t- two' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumLoops(script).count() print('Number of loops: ', count) >>> Number of loops: 2","title":"Number of loops"},{"location":"playbook/NumLoops/#number-of-loops","text":"It measures the number of loops in the script.","title":"Number of loops"},{"location":"playbook/NumLoops/#example","text":"The following example has two loops indicated by the keywords loop and with_* --- - name: with_list debug: msg: \"{{ item }}\" with_list: # 1st loop - one - two - name: with_list -> loop debug: msg: \"{{ item }}\" loop: # 2nd loop - one - two","title":"Example"},{"location":"playbook/NumLoops/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of loops Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumLoops/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_loops import NumLoops str = '- name: with_list\\n\\tdebug:\\n\\t\\tmsg: \"{{ item }}\"\\n\\twith_list:\\n\\t\\t- one\\n\\t\\t- two\\n\\n- name: with_list -> loop\\n\\tdebug:\\n\\t\\tmsg: \"{{ item }}\"\\n\\tloop:\\n\\t\\t- one\\n\\t\\t- two' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumLoops(script).count() print('Number of loops: ', count) >>> Number of loops: 2","title":"How to use"},{"location":"playbook/NumNameWithVars/","text":"Number of name with variables It measures the number of names that use variables. With uniqueness as a goal, many playbook authors look to variables to satisfy this constraint. This strategy may work well but authors need to take care as to the source of the variable data they are referencing. Variable data can come from a variety of locations, and the values assigned to variables can be defined at a variety of times. For the sake of play and task names, it is important to remember that only variables for which the values can be determined at playbook parse time will parse and render correctly. If the data of a referenced variable is discovered via a task or other operation, the variable string will be displayed unparsed in the output. Example The following example has five names , of which four using variables . --- - name: play with a {{ var_name }} # 1st name with variable hosts: localhost vars: var_name: not-mastery tasks: - name: set a variable set_fact: task_var_name: \"defined variable\" - name: task with a {{ task_var_name }} # 2nd name with variable debug: msg: \"I am mastery task\" - name: second play with a {{ task_var_name }} # 3rd name with variable hosts: localhost tasks: - name: task with a {{ runtime_var_name }} # 4th name with variable debug: msg: \"I am another mastery task\" Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of name with variables Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_name_with_variables import NumNameWithVariables str = '- name: play with a {{ var_name }}\\n\\thosts: localhost\\n\\tvars:\\n\\t\\tvar_name: not-mastery\\n\\t\\n\\ttasks:\\n\\t- name: set a variable\\n\\t\\tset_fact:\\n\\t\\ttask_var_name: \"defined variable\"\\n\\n\\t- name: task with a {{ task_var_name }}\\n\\t\\tdebug:\\n\\t\\tmsg: \"I am mastery task\"\\n\\n- name: second play with a {{ task_var_name }}\\n\\thosts: localhost\\n\\n\\ttasks:\\n\\t- name: task with a {{ runtime_var_name }}\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"I am another mastery task\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumNameWithVariables(script).count() print('Number of name with variables: ', count) >>> Number of name with variables: 4","title":"Number of name with variables"},{"location":"playbook/NumNameWithVars/#number-of-name-with-variables","text":"It measures the number of names that use variables. With uniqueness as a goal, many playbook authors look to variables to satisfy this constraint. This strategy may work well but authors need to take care as to the source of the variable data they are referencing. Variable data can come from a variety of locations, and the values assigned to variables can be defined at a variety of times. For the sake of play and task names, it is important to remember that only variables for which the values can be determined at playbook parse time will parse and render correctly. If the data of a referenced variable is discovered via a task or other operation, the variable string will be displayed unparsed in the output.","title":"Number of name with variables"},{"location":"playbook/NumNameWithVars/#example","text":"The following example has five names , of which four using variables . --- - name: play with a {{ var_name }} # 1st name with variable hosts: localhost vars: var_name: not-mastery tasks: - name: set a variable set_fact: task_var_name: \"defined variable\" - name: task with a {{ task_var_name }} # 2nd name with variable debug: msg: \"I am mastery task\" - name: second play with a {{ task_var_name }} # 3rd name with variable hosts: localhost tasks: - name: task with a {{ runtime_var_name }} # 4th name with variable debug: msg: \"I am another mastery task\"","title":"Example"},{"location":"playbook/NumNameWithVars/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of name with variables Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumNameWithVars/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_name_with_variables import NumNameWithVariables str = '- name: play with a {{ var_name }}\\n\\thosts: localhost\\n\\tvars:\\n\\t\\tvar_name: not-mastery\\n\\t\\n\\ttasks:\\n\\t- name: set a variable\\n\\t\\tset_fact:\\n\\t\\ttask_var_name: \"defined variable\"\\n\\n\\t- name: task with a {{ task_var_name }}\\n\\t\\tdebug:\\n\\t\\tmsg: \"I am mastery task\"\\n\\n- name: second play with a {{ task_var_name }}\\n\\thosts: localhost\\n\\n\\ttasks:\\n\\t- name: task with a {{ runtime_var_name }}\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"I am another mastery task\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumNameWithVariables(script).count() print('Number of name with variables: ', count) >>> Number of name with variables: 4","title":"How to use"},{"location":"playbook/NumParameters/","text":"Number of parameters Modules in Ansible have paramaters that describe the desired state of the module; each parameter handles some aspect of the module. For example, the module file has a mode parameter that specifies the permissions for the file. This property counts the number of parameters in an Ansible script. Example The following example has three parameters. - name: Create two hard links file: src: '/tmp/{{ item.src }}' # 1st parameter dest: '{{ item.dest }}' # 2nd parameter state: hard # 3rd parameter loop: - { src: x, dest: y } - { src: z, dest: k } Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of parameters Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_parameters import NumParameters str = '- name: Create two hard links\\n\\tfile:\\n\\t\\tsrc: \\'/tmp/{{ item.src }}\\'\\n\\t\\tdest: \\'{{ item.dest }}\\'\\n\\t\\tstate: hard\\n\\tloop:\\n\\t\\t- { src: x, dest: y }\\n\\t\\t- { src: z, dest: k }' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumParameters(script).count() print('Number of modules\\' parameters: ', count) >>> Number of file modules' parameters: 3","title":"Number of parameters"},{"location":"playbook/NumParameters/#number-of-parameters","text":"Modules in Ansible have paramaters that describe the desired state of the module; each parameter handles some aspect of the module. For example, the module file has a mode parameter that specifies the permissions for the file. This property counts the number of parameters in an Ansible script.","title":"Number of parameters"},{"location":"playbook/NumParameters/#example","text":"The following example has three parameters. - name: Create two hard links file: src: '/tmp/{{ item.src }}' # 1st parameter dest: '{{ item.dest }}' # 2nd parameter state: hard # 3rd parameter loop: - { src: x, dest: y } - { src: z, dest: k }","title":"Example"},{"location":"playbook/NumParameters/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of parameters Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumParameters/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_parameters import NumParameters str = '- name: Create two hard links\\n\\tfile:\\n\\t\\tsrc: \\'/tmp/{{ item.src }}\\'\\n\\t\\tdest: \\'{{ item.dest }}\\'\\n\\t\\tstate: hard\\n\\tloop:\\n\\t\\t- { src: x, dest: y }\\n\\t\\t- { src: z, dest: k }' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumParameters(script).count() print('Number of modules\\' parameters: ', count) >>> Number of file modules' parameters: 3","title":"How to use"},{"location":"playbook/NumPaths/","text":"Number of paths It counts the number of paths in the script, identified by the parameters path , src , dest . Example The following example contains three paths --- - name: \"Downloading {{program_var.stdout}} from Google Drive\" synchronize: src: \"/mnt/gdrive/plexguide/backup/{{program_var.stdout}.tar\" # 1st path dest: \"/tmp\" # 2nd path become: true become_user: 1000 - name: Remove Password lineinfile: path: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path regexp: ControlPassword=tegbzn6789 line: 'ControlPassword=' state: present when: nzbget_conf.stat.exists == False Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of path , src and dest Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_paths import NumPaths str = '- name: \"Downloading {{program_var.stdout}} from Google Drive\"\\n\\tsynchronize:\\n\\t\\tsrc: \"/mnt/gdrive/plexguide/backup/{{program_var.stdout}.tar\" # 1st path\\n\\t\\tdest: \"/tmp\"\\t# 2nd path\\n\\tbecome: true\\n\\tbecome_user: 1000\\n\\n- name: Remove Password\\n\\tlineinfile:\\n\\t\\tpath: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path\\n\\t\\tregexp: ControlPassword=tegbzn6789\\n\\t\\tline: \\'ControlPassword=\\'\\n\\t\\tstate: present\\n\\twhen: nzbget_conf.stat.exists == False' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumPaths(script).count() print('Number of paths: ', count) >>> Number of paths: 3","title":"Number of paths"},{"location":"playbook/NumPaths/#number-of-paths","text":"It counts the number of paths in the script, identified by the parameters path , src , dest .","title":"Number of paths"},{"location":"playbook/NumPaths/#example","text":"The following example contains three paths --- - name: \"Downloading {{program_var.stdout}} from Google Drive\" synchronize: src: \"/mnt/gdrive/plexguide/backup/{{program_var.stdout}.tar\" # 1st path dest: \"/tmp\" # 2nd path become: true become_user: 1000 - name: Remove Password lineinfile: path: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path regexp: ControlPassword=tegbzn6789 line: 'ControlPassword=' state: present when: nzbget_conf.stat.exists == False","title":"Example"},{"location":"playbook/NumPaths/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of path , src and dest Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumPaths/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_paths import NumPaths str = '- name: \"Downloading {{program_var.stdout}} from Google Drive\"\\n\\tsynchronize:\\n\\t\\tsrc: \"/mnt/gdrive/plexguide/backup/{{program_var.stdout}.tar\" # 1st path\\n\\t\\tdest: \"/tmp\"\\t# 2nd path\\n\\tbecome: true\\n\\tbecome_user: 1000\\n\\n- name: Remove Password\\n\\tlineinfile:\\n\\t\\tpath: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path\\n\\t\\tregexp: ControlPassword=tegbzn6789\\n\\t\\tline: \\'ControlPassword=\\'\\n\\t\\tstate: present\\n\\twhen: nzbget_conf.stat.exists == False' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumPaths(script).count() print('Number of paths: ', count) >>> Number of paths: 3","title":"How to use"},{"location":"playbook/NumPlays/","text":"Number of plays It measures the number of plays in the script. Example The following example from the Ansible's documentation is a site-wide deployment playbook with five plays, targeting the dbserver , the webserver , the lbserver , and the monitoring , respectively: --- - hosts: all # 1st play roles: - common - hosts: dbservers # 2nd play roles: - db - hosts: webservers # 3rd play roles: - base-apache - web - hosts: lbservers # 4th play roles: - haproxy - hosts: monitoring # 5th play roles: - base-apache - nagios Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of plays Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_plays import NumPlays str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumPlays(script).count() print('Number of plays: ', count) >>> Number of plays: 5","title":"Number of plays"},{"location":"playbook/NumPlays/#number-of-plays","text":"It measures the number of plays in the script.","title":"Number of plays"},{"location":"playbook/NumPlays/#example","text":"The following example from the Ansible's documentation is a site-wide deployment playbook with five plays, targeting the dbserver , the webserver , the lbserver , and the monitoring , respectively: --- - hosts: all # 1st play roles: - common - hosts: dbservers # 2nd play roles: - db - hosts: webservers # 3rd play roles: - base-apache - web - hosts: lbservers # 4th play roles: - haproxy - hosts: monitoring # 5th play roles: - base-apache - nagios","title":"Example"},{"location":"playbook/NumPlays/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of plays Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumPlays/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_plays import NumPlays str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumPlays(script).count() print('Number of plays: ', count) >>> Number of plays: 5","title":"How to use"},{"location":"playbook/NumPrompts/","text":"Number of prompts It measures the number of interactions with users by means of the module prompts in the script. Example The following example from the Ansible's documentation repository has three prompts : - hosts: all remote_user: root vars_prompt: - name: \"name\" prompt: \"what is your name?\" - name: \"quest\" prompt: \"what is your quest?\" - name: \"favcolor\" prompt: \"what is your favorite color?\" Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of prompt Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_user_initeraction import NumUserInteraction str = '- hosts: all\\n\\tremote_user: root\\n\\n\\tvars_prompt:\\n\\t\\t- name: \"name\"\\n\\t\\t\\tprompt: \"what is your name?\"\\n\\t\\t- name: \"quest\"\\n\\t\\t\\tprompt: \"what is your quest?\"\\n\\t\\t- name: \"favcolor\"\\n\\t\\t\\tprompt: \"what is your favorite color?\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUserInteraction(script).count() print('Number of user interaction: ', count) >>> Number of user interaction: 3","title":"Number of prompts"},{"location":"playbook/NumPrompts/#number-of-prompts","text":"It measures the number of interactions with users by means of the module prompts in the script.","title":"Number of prompts"},{"location":"playbook/NumPrompts/#example","text":"The following example from the Ansible's documentation repository has three prompts : - hosts: all remote_user: root vars_prompt: - name: \"name\" prompt: \"what is your name?\" - name: \"quest\" prompt: \"what is your quest?\" - name: \"favcolor\" prompt: \"what is your favorite color?\"","title":"Example"},{"location":"playbook/NumPrompts/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of prompt Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumPrompts/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_user_initeraction import NumUserInteraction str = '- hosts: all\\n\\tremote_user: root\\n\\n\\tvars_prompt:\\n\\t\\t- name: \"name\"\\n\\t\\t\\tprompt: \"what is your name?\"\\n\\t\\t- name: \"quest\"\\n\\t\\t\\tprompt: \"what is your quest?\"\\n\\t\\t- name: \"favcolor\"\\n\\t\\t\\tprompt: \"what is your favorite color?\"' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUserInteraction(script).count() print('Number of user interaction: ', count) >>> Number of user interaction: 3","title":"How to use"},{"location":"playbook/NumRegex/","text":"Number of regex It counts the number of times a regular expression is used to perform some operations, by looking at the regexp syntax in the script. Example The following example contains one regexp --- - name: Remove Password lineinfile: path: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path regexp: ControlPassword=tegbzn6789 line: 'ControlPassword=' state: present when: nzbget_conf.stat.exists == False Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of regexp Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_regex import NumRegex str = '- name: Remove Password\\n\\tlineinfile:\\n\\t\\tpath: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path\\n\\t\\tregexp: ControlPassword=tegbzn6789\\n\\t\\tline: \\'ControlPassword=\\'\\n\\t\\tstate: present\\n\\twhen: nzbget_conf.stat.exists == False' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumRegex(script).count() print('Number of regexp: ', count) >>> Number of regexp: 1","title":"Number of regex"},{"location":"playbook/NumRegex/#number-of-regex","text":"It counts the number of times a regular expression is used to perform some operations, by looking at the regexp syntax in the script.","title":"Number of regex"},{"location":"playbook/NumRegex/#example","text":"The following example contains one regexp --- - name: Remove Password lineinfile: path: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path regexp: ControlPassword=tegbzn6789 line: 'ControlPassword=' state: present when: nzbget_conf.stat.exists == False","title":"Example"},{"location":"playbook/NumRegex/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of regexp Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumRegex/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_regex import NumRegex str = '- name: Remove Password\\n\\tlineinfile:\\n\\t\\tpath: \"/opt/appdata/nzbget/nzbget.conf\" # 3rd path\\n\\t\\tregexp: ControlPassword=tegbzn6789\\n\\t\\tline: \\'ControlPassword=\\'\\n\\t\\tstate: present\\n\\twhen: nzbget_conf.stat.exists == False' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumRegex(script).count() print('Number of regexp: ', count) >>> Number of regexp: 1","title":"How to use"},{"location":"playbook/NumRoles/","text":"Number of roles It measures the number of distinct roles in the script. Example The following example from the Ansible's documentation is a site-wide deployment playbook with six roles, namely common , db , base-apache , web , haproxy , and nagios : --- - hosts: all roles: - common # 1st role - hosts: dbservers roles: - db # 2nd role - hosts: webservers roles: - base-apache # 3rd role - web # 4th role - hosts: lbservers roles: - haproxy # 5th role - hosts: monitoring roles: - base-apache - nagios # 6th role Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of roles Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_roles import NumRoles str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumRoles(script).count() print('Number of roles: ', count) >>> Number of roles: 6","title":"Number of roles"},{"location":"playbook/NumRoles/#number-of-roles","text":"It measures the number of distinct roles in the script.","title":"Number of roles"},{"location":"playbook/NumRoles/#example","text":"The following example from the Ansible's documentation is a site-wide deployment playbook with six roles, namely common , db , base-apache , web , haproxy , and nagios : --- - hosts: all roles: - common # 1st role - hosts: dbservers roles: - db # 2nd role - hosts: webservers roles: - base-apache # 3rd role - web # 4th role - hosts: lbservers roles: - haproxy # 5th role - hosts: monitoring roles: - base-apache - nagios # 6th role","title":"Example"},{"location":"playbook/NumRoles/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of roles Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumRoles/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_roles import NumRoles str = '---\\n- hosts: all\\n\\troles:\\n\\t- common\\n\\n- hosts: dbservers\\n\\troles:\\n\\t- db\\n\\n- hosts: webservers\\n\\troles:\\n\\t- base-apache\\n\\t- web\\n\\n- hosts: lbservers\\n\\troles:\\n\\t- haproxy\\n\\n- hosts: monitoring\\n\\troles:\\n\\t- base-apache\\n\\t- nagios' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumRoles(script).count() print('Number of roles: ', count) >>> Number of roles: 6","title":"How to use"},{"location":"playbook/NumTasks/","text":"Number of tasks It measures the number of tasks in the script. Example The following script extracted from the ansible-examples repository has three tasks, namely INCLUDE UNIQUE USERNAME FROM REGISTER.YML , GRAB HUE LIGHT INFORMATION and PRINT DATA TO TERMINAL WINDOW . - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML # 1st task include_vars: file: username_info.yml - name: GRAB HUE LIGHT INFORMATION # 2nd task uri: url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW # 3rd task debug: var: light_info.json.lights Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_tasks import NumTasks str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: \"{{body_info|to_json}}\"\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumTasks(script).count() print('Number of tasks: ', count) >>> Number of tasks: 3","title":"Number of tasks"},{"location":"playbook/NumTasks/#number-of-tasks","text":"It measures the number of tasks in the script.","title":"Number of tasks"},{"location":"playbook/NumTasks/#example","text":"The following script extracted from the ansible-examples repository has three tasks, namely INCLUDE UNIQUE USERNAME FROM REGISTER.YML , GRAB HUE LIGHT INFORMATION and PRINT DATA TO TERMINAL WINDOW . - name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML # 1st task include_vars: file: username_info.yml - name: GRAB HUE LIGHT INFORMATION # 2nd task uri: url: \"http://{{ip_address}}/api/{{username}}\" method: GET body: '{{body_info|to_json}}' register: light_info - name: PRINT DATA TO TERMINAL WINDOW # 3rd task debug: var: light_info.json.lights","title":"Example"},{"location":"playbook/NumTasks/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of tasks Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumTasks/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_tasks import NumTasks str = '- name: INCLUDE UNIQUE USERNAME FROM REGISTER.YML\\n\\tinclude_vars:\\n\\t\\tfile: username_info.yml\\n\\n- name: GRAB HUE LIGHT INFORMATION\\n\\turi:\\n\\t\\turl: \"http://{{ip_address}}/api/{{username}}\"\\n\\t\\tmethod: GET\\n\\t\\tbody: \"{{body_info|to_json}}\"\\n\\tregister: light_info\\n\\n- name: PRINT DATA TO TERMINAL WINDOW\\n\\tdebug:\\n\\t\\tvar: light_info.json.lights' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumTasks(script).count() print('Number of tasks: ', count) >>> Number of tasks: 3","title":"How to use"},{"location":"playbook/NumUniqueNames/","text":"Number of unique name Given an Ansible script, the metric returns the number of unique names in play and tasks of the playbook. The relative number of unique names is measured as the number of unique name divided by the total number of name in the script. Naming plays and tasks uniquely is a best practice in general that will help to quickly identify where a problematic task may reside in your hierarchy of playbooks, roles, task files, handlers and so on. Uniqueness is more important when notifying a handler or when starting at a specific task. When task names have duplicates, the behavior of Ansible may be nondeterministic or at least not obvious. The implementation of this metric assumes names with same string and variable as equal (even though the variable value can vary through the execution workflow). Example The following example is a playbook contains three name , one of which is unique: --- - name: demo the logic # unique name hosts: localhost gather_facts: false vars: num1: 10 num3: 10 tasks: - name: logic and comparison # duplicate debug: msg: \"Can you read me?\" when: num1 >= num3 and num1 is even and num2 is not defined - name: logic and comparison # duplicate debug: msg: \"Can you read me again?\" when: num3 >= num1 Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of unique name Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_unique_names import NumUniqueNames str = '- name: demo the logic\\n\\thosts: localhost\\n\\tgather_facts: false\\n\\tvars:\\n\\tnum1: 10\\n\\tnum3: 10\\n\\ttasks:\\n\\t- name: logic and comparison\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"Can you read me?\"\\n\\t\\twhen: num1 >= num3 and num1 is even and num2 is not defined\\n\\t- name: logic and comparison\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"Can you read me again?\"\\n\\t\\twhen: num3 >= num1' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUniqueNames(script).count() print('Number of unique names: ', count) >>> Number of unique names: 1","title":"Number of unique names"},{"location":"playbook/NumUniqueNames/#number-of-unique-name","text":"Given an Ansible script, the metric returns the number of unique names in play and tasks of the playbook. The relative number of unique names is measured as the number of unique name divided by the total number of name in the script. Naming plays and tasks uniquely is a best practice in general that will help to quickly identify where a problematic task may reside in your hierarchy of playbooks, roles, task files, handlers and so on. Uniqueness is more important when notifying a handler or when starting at a specific task. When task names have duplicates, the behavior of Ansible may be nondeterministic or at least not obvious. The implementation of this metric assumes names with same string and variable as equal (even though the variable value can vary through the execution workflow).","title":"Number of unique name"},{"location":"playbook/NumUniqueNames/#example","text":"The following example is a playbook contains three name , one of which is unique: --- - name: demo the logic # unique name hosts: localhost gather_facts: false vars: num1: 10 num3: 10 tasks: - name: logic and comparison # duplicate debug: msg: \"Can you read me?\" when: num1 >= num3 and num1 is even and num2 is not defined - name: logic and comparison # duplicate debug: msg: \"Can you read me again?\" when: num3 >= num1","title":"Example"},{"location":"playbook/NumUniqueNames/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of unique name Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumUniqueNames/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_unique_names import NumUniqueNames str = '- name: demo the logic\\n\\thosts: localhost\\n\\tgather_facts: false\\n\\tvars:\\n\\tnum1: 10\\n\\tnum3: 10\\n\\ttasks:\\n\\t- name: logic and comparison\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"Can you read me?\"\\n\\t\\twhen: num1 >= num3 and num1 is even and num2 is not defined\\n\\t- name: logic and comparison\\n\\t\\tdebug:\\n\\t\\t\\tmsg: \"Can you read me again?\"\\n\\t\\twhen: num3 >= num1' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUniqueNames(script).count() print('Number of unique names: ', count) >>> Number of unique names: 1","title":"How to use"},{"location":"playbook/NumUri/","text":"Number of uri The uri module allows interations with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms. To this end it requires to specify an url . This property counts the occurrences of uri modules. Example The following example has one parameters. - name: Check that you can connect (GET) to a page and it returns a status 200 uri: url: http://www.example.com Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of uri Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_uri import NumUri str = '- name: Check that you can connect (GET) to a page and it returns a status 200\\n\\turi:\\n\\t\\turl: http://www.example.com' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUri(script).count() print('Number of uri: ', count) >>> Number of uri: 1","title":"Number of urls"},{"location":"playbook/NumUri/#number-of-uri","text":"The uri module allows interations with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms. To this end it requires to specify an url . This property counts the occurrences of uri modules.","title":"Number of uri"},{"location":"playbook/NumUri/#example","text":"The following example has one parameters. - name: Check that you can connect (GET) to a page and it returns a status 200 uri: url: http://www.example.com","title":"Example"},{"location":"playbook/NumUri/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of uri Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumUri/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_uri import NumUri str = '- name: Check that you can connect (GET) to a page and it returns a status 200\\n\\turi:\\n\\t\\turl: http://www.example.com' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumUri(script).count() print('Number of uri: ', count) >>> Number of uri: 1","title":"How to use"},{"location":"playbook/NumVars/","text":"Number of variables It measures the number of playbooks variables in the script. Note: role and task variables are included, as well as registered variables . A major use of variables is running a command and registering the result of that command as a variable. When someone executes a task and save the return value in a variable for use in later tasks, s/he creates a registered variable. Example The following example has three variables, namely http_port , app_path and favcolor : --- - hosts: webservers vars: http_port: 80 # 1st variable - hosts: app_servers vars: app_path: \"{{ base_path }}/22\" # 2nd variable - hosts: all remote_user: root vars: favcolor: blue # 3rd variable vars_files: # !!! vars_files is not supported by this version - /vars/external_vars.yml Parameters Type Description Input io.StringIO An ansible playbook Output unsigned int The number of variables Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml How to use Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_vars import NumVars str = '---\\n- hosts: webservers\\n\\tvars:\\n\\t\\thttp_port: 80\\n\\t\\t\\n- hosts: app_servers\\n\\tvars:\\n\\t\\tapp_path: \"{{ base_path }}/22\"\\n\\n- hosts: all\\n\\tremote_user: root\\n\\tvars:\\n\\t\\tfavcolor: blue\\n\\tvars_files:\\n\\t\\t- /vars/external_vars.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumVars(script).count() print('Number of variables: ', count) >>> Number of variables: 3","title":"Number of variables"},{"location":"playbook/NumVars/#number-of-variables","text":"It measures the number of playbooks variables in the script. Note: role and task variables are included, as well as registered variables . A major use of variables is running a command and registering the result of that command as a variable. When someone executes a task and save the return value in a variable for use in later tasks, s/he creates a registered variable.","title":"Number of variables"},{"location":"playbook/NumVars/#example","text":"The following example has three variables, namely http_port , app_path and favcolor : --- - hosts: webservers vars: http_port: 80 # 1st variable - hosts: app_servers vars: app_path: \"{{ base_path }}/22\" # 2nd variable - hosts: all remote_user: root vars: favcolor: blue # 3rd variable vars_files: # !!! vars_files is not supported by this version - /vars/external_vars.yml","title":"Example"},{"location":"playbook/NumVars/#parameters","text":"Type Description Input io.StringIO An ansible playbook Output unsigned int The number of variables Exception TypeError If the type of the input parameter is not io.StringIO yaml.YAMLError If the input file is not a valid yaml","title":"Parameters"},{"location":"playbook/NumVars/#how-to-use","text":"Below an example on how to call the metric and the expected output for the provided example: from io import StringIO from ansiblemetrics.playbook.num_vars import NumVars str = '---\\n- hosts: webservers\\n\\tvars:\\n\\t\\thttp_port: 80\\n\\t\\t\\n- hosts: app_servers\\n\\tvars:\\n\\t\\tapp_path: \"{{ base_path }}/22\"\\n\\n- hosts: all\\n\\tremote_user: root\\n\\tvars:\\n\\t\\tfavcolor: blue\\n\\tvars_files:\\n\\t\\t- /vars/external_vars.yml' script = StringIO(str.expands(2)) # substitute \\t with 2 spaces and create the StringIO object count = NumVars(script).count() print('Number of variables: ', count) >>> Number of variables: 3","title":"How to use"}]}